<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExtendedGrid</name>
    </assembly>
    <members>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGrid">
            <summary>
                A DataGrid control that displays data in rows and columns and allows
                for the entering and editing of data.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.#cctor">
            <summary>
                Instantiates global information.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserResizeColumnsProperty">
            <summary>
                The DependencyProperty that represents the CanUserResizeColumns property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnWidthProperty">
            <summary>
                The DependencyProperty that represents the ColumnWidth property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MinColumnWidthProperty">
            <summary>
                The DependencyProperty that represents the MinColumnWidth property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MaxColumnWidthProperty">
            <summary>
                The DependencyProperty that represents the  MaxColumnWidth property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ValidateMinColumnWidth(System.Object)">
            <summary>
            Validates that the minimum column width is an acceptable value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ValidateMaxColumnWidth(System.Object)">
            <summary>
            Validates that the maximum column width is an acceptable value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnColumnsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Called when the Columns collection changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateDataGridReference(System.Collections.IList,System.Boolean)">
            <summary>
                Updates the reference to this DataGrid on the list of columns.
            </summary>
            <param name="list">The list of affected columns.</param>
            <param name="clear">Whether to add or remove the reference to this grid.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateColumnSizeConstraints(System.Collections.IList)">
            <summary>
                Updates the transferred size constraints from DataGrid on the columns.
            </summary>
            <param name="list">The list of affected columns.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HasVisibleColumns(System.Collections.IList)">
            <summary>
                Helper method which determines if the
                given list has visible columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnFromDisplayIndex(System.Int32)">
            <summary>
                Returns the DataGridColumn with the given DisplayIndex
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnColumnDisplayIndexChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnEventArgs)">
            <summary>
                Called when the DisplayIndex of a column is modified.
            </summary>
            <remarks>
                A column's DisplayIndex may be modified as the result of another column's DisplayIndex changing.  This is because the 
                DataGrid enforces that the DisplayIndex of all Columns are unique integers from 0 to Columns.Count -1.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ValidateDisplayIndex(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32)">
            <summary>
                Throws an ArgumentOutOfRangeException if the given displayIndex is invalid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnIndexFromDisplayIndex(System.Int32)">
            <summary>
                Returns the index of a column from the given DisplayIndex
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeaderFromDisplayIndex(System.Int32)">
            <summary>
                Given the DisplayIndex of a column returns the DataGridColumnHeader for that column.
                Used by DataGridColumnHeader to find its previous sibling.
            </summary>
            <param name="displayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyCellsPresenterPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies each CellsPresenter about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyColumnAndCellPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies each Column and Cell about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyColumnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies each Column about property changes.
            </summary>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyColumnAndColumnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyColumnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the Column Headers about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the Row and Column Headers about property changes (used by the AlternationBackground property)
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyDataGridAndRowPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the DataGrid and each Row about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyGridLinePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies everyone who cares about GridLine property changes (Row, Cell, RowHeader, ColumnHeader)
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyRowPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies each Row about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyRowHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the Row Headers about property changes.
            </summary>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyRowAndRowHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyRowAndDetailsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyHorizontalOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies HorizontalOffset change to columns collection, cellspresenter and column headers presenter
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
            <remarks>
                This can be called from a variety of sources, such as from column objects
                or from this DataGrid itself when there is a need to notify the rows and/or
                the cells in the DataGrid about a property change. Down-stream handlers 
                can check the source of the change using the "d" parameter.
            </remarks>
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NotifyPropertyChanged(System.Windows.DependencyObject,System.String,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
            <remarks>
                This can be called from a variety of sources, such as from column objects
                or from this DataGrid itself when there is a need to notify the rows and/or
                the cells in the DataGrid about a property change. Down-stream handlers 
                can check the source of the change using the "d" parameter.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateColumnsOnVirtualizedCellInfoCollections(System.Collections.Specialized.NotifyCollectionChangedAction,System.Int32,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32)">
            <summary>
                Called by DataGridColumnCollection when columns' DisplayIndex changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)">
            <summary>
                OnTemplateChanged override
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GridLinesVisibilityProperty">
            <summary>
                GridLinesVisibility Dependency Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty">
            <summary>
            HorizontalGridLinesBrush Dependency Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty">
            <summary>
            VerticalGridLinesBrush Dependency Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines if an item is its own container.
            </summary>
            <param name="item">The item to test.</param>
            <returns>true if the item is a DataGridRow, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetContainerForItemOverride">
            <summary>
                Instantiates an instance of a container.
            </summary>
            <returns>A new DataGridRow.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Prepares a new container for a given item.
            </summary>
            <param name="element">The new container.</param>
            <param name="item">The item that the container represents.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Clears a container of references.
            </summary>
            <param name="element">The container being cleared.</param>
            <param name="item">The data item that the container represented.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateColumnsOnRows(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Propagates the collection changed notification on Columns down to
                each active DataGridRow.
            </summary>
            <param name="e">The event arguments from the original collection changed event.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowStyleProperty">
            <summary>
                DependencyProperty for the RowStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowValidationErrorTemplateProperty">
            <summary>
                DependencyProperty for the RowValidationErrorTemplate property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnRowValidationRulesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Called when the Columns collection changes.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowStyleSelectorProperty">
            <summary>
                DependencyProperty for the RowStyleSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowBackgroundProperty">
            <summary>
                DependencyProperty for RowBackground.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty">
            <summary>
                DependencyProperty for AlternatingRowBackground.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeightProperty">
            <summary>
                The DependencyProperty for RowHeight.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MinRowHeightProperty">
            <summary>
                The DependencyProperty for MinRowHeight.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnLoadingRow(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEventArgs)">
            <summary>
                Invokes the LoadingRow event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnUnloadingRow(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEventArgs)">
            <summary>
                Invokes the UnloadingRow event
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderWidthProperty">
            <summary>
                The DependencyProperty for RowHeaderWidth.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderActualWidthPropertyKey">
            <summary>
                The DependencyPropertyKey for RowHeaderActualWidth.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderActualWidthProperty">
            <summary>
                The DependencyProperty for RowHeaderActualWidth.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeaderHeightProperty">
            <summary>
                The DependencyProperty for ColumnHeaderHeight.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HeadersVisibilityProperty">
            <summary>
                The DependencyProperty that represents the HeadersVisibility property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnNotifyRowHeaderWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Updates RowHeaderActualWidth to reflect changes to RowHeaderWidth 
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ResetRowHeaderActualWidth">
            <summary>
            Resets the RowHeaderActualWidth to 0.0 if in Auto mode
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SetDetailsVisibilityForItem(System.Object,System.Windows.Visibility)">
            <summary>
                Sets the specified item's DetailsVisibility.
            </summary>
            <remarks>
                This is useful when a DataGridRow may not currently exists to set DetailsVisibility on.
            </remarks>
            <param name="item">The item that will have its DetailsVisibility set.</param>
            <param name="detailsVisibility">The Visibility that the item's details should get.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetDetailsVisibilityForItem(System.Object)">
            <summary>
                Returns the current DetailsVisibility for an item that's in the DataGrid.
            </summary>
            <param name="item">The item who's DetailsVisibility you would like to get</param>
            <returns>The DetailsVisibility associated with the specified item.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ClearDetailsVisibilityForItem(System.Object)">
            <summary>
                Clears the DetailsVisibility for the specified item
            </summary>
            <param name="item">The item to clear the DetailsVisibility on.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellStyleProperty">
            <summary>
                The DependencyProperty that represents the CellStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeaderStyleProperty">
            <summary>
                The DependencyProperty that represents the ColumnHeaderStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderStyleProperty">
            <summary>
                The DependencyProperty that represents the RowHeaderStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderTemplateProperty">
            <summary>
                The DependencyProperty for the RowHeaderTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderTemplateSelectorProperty">
            <summary>
                The DependencyProperty for the RowHeaderTemplateSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty">
            <summary>
                The DependencyProperty for the HorizontalScrollBarVisibility property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty">
            <summary>
                The DependencyProperty for the HorizontalScrollBarVisibility property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ScrollIntoView(System.Object)">
            <summary>
                Scrolls a row into view.
            </summary>
            <param name="item">The data item of the row to bring into view.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ScrollIntoView(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
                Scrolls a cell into view.
            If column is null then only vertical scroll is performed.
            If row is null then only horizontal scroll is performed.
            </summary>
            <param name="item">The data item row that contains the cell.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnScrollIntoView(System.Object)">
            <summary>
                Previous call to ScrollIntoView found that the generator had not finished
                generating cells. This is the callback at Loaded priority when hopefully
                that has occured.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Called when IsMouseCaptured changes on this element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.StartAutoScroll">
            <summary>
                Begins a timer that will periodically scroll and select.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.StopAutoScroll">
            <summary>
                Stops the timer that controls auto-scrolling.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnAutoScrollTimeout(System.Object,System.EventArgs)">
            <summary>
                The callback when the auto-scroll timer ticks.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DoAutoScroll">
            <summary>
                Based on the mouse position relative to the rows and cells,
                scrolls and selects rows and/or cells.
            </summary>
            <returns>true if a scroll and select was attempted. false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.EnsureInternalScrollControls">
            <summary>
                Helper method which ensures the initialization of scroll controls.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CleanUpInternalScrollControls">
            <summary>
                Helper method which cleans up the internal scroll controls.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnInternalScrollContentPresenterSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
                Size changed handler for InteralScrollContentPresenter.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnViewportSizeChanged(System.Windows.Size,System.Windows.Size)">
            <summary>
                Helper method which enqueues a viewport width change 
                request to Dispatcher if needed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnDelayedViewportWidthChanged(System.Object)">
            <summary>
                Dispatcher callback method for Viewport width change
                which propagates the notification if needed.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalScrollOffsetProperty">
            <summary>
                Dependency property which would be bound to ContentHorizontalOffset
                property of the ScrollViewer.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.BeginEditCommand">
            <summary>
                The command to fire and allow to route to the DataGrid in order to indicate that the
                current cell or row should begin editing.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CommitEditCommand">
            <summary>
                The command to fire and allow to route to the DataGrid in order to indicate that the
                current cell or row should commit any pending changes and exit edit mode.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CancelEditCommand">
            <summary>
                The command to fire and allow to route to the DataGrid in order to indicate that the
                current cell or row should purge any pending changes and revert to the state it was
                in before BeginEdit.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCanExecuteBeginEdit(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
                Invoked to determine if the BeginEdit command can be executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnExecutedBeginEdit(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
                Invoked when the BeginEdit command is executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCanExecuteCommitEdit(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
                Invoked to determine if the CommitEdit command can be executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnExecutedCommitEdit(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
                Invoked when the CommitEdit command is executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DoNothing(System.Object)">
            <summary>
            This is a helper method used to flush the dispatcher down to DataBind priority so that the bindingGroup will be ready for CommitEdit.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnRowEditEnding(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs)">
            <summary>
                Called just before row editing is ended.
                Gives subclasses the opportunity to cancel the operation.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCellEditEnding(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs)">
            <summary>
                Called just before cell editing is ended.
                Gives subclasses the opportunity to cancel the operation.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCanExecuteCancelEdit(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
                Invoked to determine if the CancelEdit command can be executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnExecutedCancelEdit(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
                Invoked when the CancelEdit command is executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCanExecuteDelete(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
                Invoked to determine if the Delete command can be executed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnExecutedDelete(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
                Invoked when the Delete command is executed.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.IsReadOnlyProperty">
            <summary>
                The DependencyProperty for IsReadOnly.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentItemProperty">
            <summary>
                The DependencyProperty for CurrentItem.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentColumnProperty">
            <summary>
                The DependencyProperty for CurrentColumn.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentCellProperty">
            <summary>
                The DependencyProperty for CurrentCell.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCurrentCellChanged(System.EventArgs)">
            <summary>
                Called when the value of CurrentCell changes.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnBeginningEdit(ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs)">
            <summary>
                Called just before a cell will change to edit mode
                to all subclasses to prevent the cell from entering edit mode.
            </summary>
            <remarks>
                Default implementation raises the BeginningEdit event.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnPreparingCellForEdit(ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs)">
            <summary>
                Called after a cell has changed to editing mode to allow
                subclasses to modify the contents of the cell.
            </summary>
            <remarks>
                Default implementation raises the PreparingCellForEdit event.
                This method is invoked from DataGridCell (instead of DataGrid) once it has entered edit mode.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.BeginEdit">
            <summary>
                Raises the BeginEdit command, which will place the current cell or row into
                edit mode.
            </summary>
            <remarks>
                If the command is enabled, this will lead to the BeginningEdit and PreparingCellForEdit
                overrides and events.
            </remarks>
            <returns>true if the current cell or row enters edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.BeginEdit(System.Windows.RoutedEventArgs)">
            <summary>
                Raises the BeginEdit command, which will place the current cell or row into
                edit mode.
            </summary>
            <remarks>
                If the command is enabled, this will lead to the BeginningEdit and PreparingCellForEdit
                overrides and events.
            </remarks>
            <param name="editingEventArgs">The event arguments, if any, that led to BeginEdit being called. May be null.</param>
            <returns>true if the current cell or row enters edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CancelEdit">
            <summary>
                Raises the CancelEdit command.
                If a cell is currently in edit mode, cancels the cell edit, but leaves any row edits alone.
                If a cell is not in edit mode, then cancels any pending row edits.
            </summary>
            <returns>true if the current cell or row exits edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CancelEdit(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell)">
            <summary>
                Raises the CancelEdit command.
                If a cell is currently in edit mode, cancels the cell edit, but leaves any row edits alone.
            </summary>
            <returns>true if the cell exits edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CancelEdit(ExtendedGrid.Microsoft.Windows.Controls.DataGridEditingUnit)">
            <summary>
                Raises the CancelEdit command.
                Reverts any pending editing changes to the desired editing unit and exits edit mode.
            </summary>
            <param name="editingUnit">Whether to cancel edit mode of the current cell or current row.</param>
            <returns>true if the current cell or row exits edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CommitEdit">
            <summary>
                Raises the CommitEdit command.
                If a cell is currently being edited, commits any pending changes to the cell, but
                leaves any pending changes to the row. This should mean that changes are propagated
                from the editing environment to the pending row.
                If a cell is not currently being edited, then commits any pending rows.
            </summary>
            <returns>true if the current cell or row exits edit mode, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CommitEdit(ExtendedGrid.Microsoft.Windows.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
                Raises the CommitEdit command.
                Commits any pending changes for the given editing unit and exits edit mode.
            </summary>
            <param name="editingUnit">Whether to commit changes for the current cell or current row.</param>
            <param name="exitEditingMode">Whether to exit edit mode.</param>
            <returns>true if the current cell or row exits edit mode, false otherwise.</returns>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserAddRowsProperty">
            <summary>
                DependencyProperty for CanUserAddRows.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserDeleteRowsProperty">
            <summary>
                DependencyProperty for CanUserDeleteRows.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnInitializingNewItem(ExtendedGrid.Microsoft.Windows.Controls.InitializingNewItemEventArgs)">
            <summary>
                A method that is called when a new item is created so that
                overrides can initialize the item with custom default values.
            </summary>
            <remarks>
                The default implementation raises the InitializingNewItem event.
            </remarks>
            <param name="e">Event arguments that provide access to the new item.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty">
            <summary>
                DependencyProperty for RowDetailsVisibilityMode.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty">
            <summary>
                DependencyProperty for AreRowDetailsFrozen.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsTemplateProperty">
            <summary>
                DependencyProperty for RowDetailsTemplate.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsTemplateSelectorProperty">
            <summary>
                DependencyProperty for RowDetailsTemplateSelector.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnLoadingRowDetails(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
                Invokes the LoadingRowDetails event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnUnloadingRowDetails(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
                Invokes the UnloadingRowDetails event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnRowDetailsVisibilityChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
                Invokes the RowDetailsVisibilityChanged event
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserResizeRowsProperty">
            <summary>
                The DependencyProperty that represents the CanUserResizeColumns property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnSelectedCellsChanged(System.Collections.Specialized.NotifyCollectionChangedAction,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Direct notification from the SelectedCells collection of a change.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NotifySelectedCellsChanged">
            <summary>
                Fires the public change event when there are pending cell changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnSelectedCellsChanged(ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs)">
            <summary>
                Called when there are changes to the SelectedCells collection.
            </summary>
            <param name="e">Event arguments that indicate which cells were added or removed.</param>
            <remarks>
                Base implementation fires the public SelectedCellsChanged event.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectAllCells">
            <summary>
                Selects all cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UnselectAllCells">
            <summary>
                Unselects all cells.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectionModeProperty">
            <summary>
                The DependencyProperty for the SelectionMode property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectionUnitProperty">
            <summary>
                The DependencyProperty for the SelectionUnit property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
                Called when SelectedItems changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateIsSelected(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection,System.Boolean)">
            <summary>
                Updates the IsSelected property on cells due to a change in SelectedCells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellIsSelectedChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Boolean)">
            <summary>
                Notification that a particular cell's IsSelected property changed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HandleSelectionForCellInput(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                There was general input that means that selection should occur on
                the given cell.
            </summary>
            <param name="cell">The target cell.</param>
            <param name="startDragging">Whether the input also indicated that dragging should start.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HandleSelectionForRowHeaderAndDetailsInput(ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Boolean)">
            <summary>
                There was general input on a row header that indicated that
                selection should occur on the given row.
            </summary>
            <param name="row">The target row.</param>
            <param name="startDragging">Whether the input also indicated that dragging should start.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MakeFullRowSelection(System.Object,System.Boolean,System.Boolean)">
            <summary>
                Processes selection for a row.
                Depending on the current keyboard state, this may mean
                - Selecting the row
                - Deselecting the row
                - Deselecting other rows
                - Extending selection to the row
            </summary>
            <remarks>
                ADO.Net has a bug (#524977) where if the row is in edit mode
                and atleast one of the cells are edited and committed without
                commiting the row itself, DataView.IndexOf for that row returns -1
                and DataView.Contains returns false. The Workaround to this problem 
                is to try to use the previously computed row index if the operations 
                are in the same row scope.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MakeCellSelection(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo,System.Boolean,System.Boolean)">
            <summary>
                Process selection on a cell.
                Depending on the current keyboard state, this may mean
                - Selecting the cell
                - Deselecting the cell
                - Deselecting other cells
                - Extending selection to the cell
            </summary>
            <remarks>
                ADO.Net has a bug (#524977) where if the row is in edit mode
                and atleast one of the cells are edited and committed without
                commiting the row itself, DataView.IndexOf for that row returns -1
                and DataView.Contains returns false. The Workaround to this problem 
                is to try to use the previously computed row index if the operations 
                are in the same row scope.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateSelectedItems(System.Object,System.Boolean)">
            <summary>
                Adds or Removes from SelectedItems when deferred selection is not handled by the caller. 
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UpdateSelectedCells">
            <summary>
                When changing SelectedCells, do:
                using (UpdateSelectedCells())
                {
                    ...
                }
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Called when a keyboard key is pressed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnArrowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Helper method which handles the arrow key down
            </summary>
            <remarks>
                ADO.Net has a bug (#524977) where if the row is in edit mode
                and atleast one of the cells are edited and committed without
                commiting the row itself, DataView.IndexOf for that row returns -1
                and DataView.Contains returns false. The Workaround to this problem 
                is to try to use the previously computed row index if the operations 
                are in the same row scope.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnTabKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Called when the tab key is pressed to perform focus navigation.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
                Continues a drag selection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnAnyMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Ends a drag selection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
                When a ContextMenu opens on a cell that isn't selected, it should 
                become selected.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetRowNearMouse">
            <summary>
                Finds the row that contains the mouse's Y coordinate.
            </summary>
            <remarks>
                Relies on InternalItemsHost.
                Meant to be used when the mouse is outside the DataGrid.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetCellNearMouse">
            <summary>
                Finds the cell that is nearest to the mouse.
            </summary>
            <remarks>
                Relies on InternalItemsHost.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CalculateCellDistance(System.Windows.FrameworkElement,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Windows.Controls.Panel,System.Windows.Rect,System.Boolean,System.Double@)">
            <summary>
                Determines if a cell meets the criteria for being chosen. If it does, it
                calculates its a "distance" that can be compared to other cells.
            </summary>
            <param name="distance">
                A value that represents the distance between the mouse and the cell.
                This is not necessarily an accurate pixel number in some cases.
            </param>
            <returns>
                true if the cell can be a drag target. false otherwise.
            </returns>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserSortColumnsProperty">
            <summary>
            Dependecy property for CanUserSortColumns Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnSorting(ExtendedGrid.Microsoft.Windows.Controls.DataGridSortingEventArgs)">
            <summary>
            Protected method which raises the sorting event and does default sort
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.PerformSort(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            Method to perform sorting on datagrid
            </summary>
            <param name="sortColumn"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.PrepareForSort(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            Clears the sort directions for all the columns except the column to be sorted upon
            </summary>
            <param name="sortColumn"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DefaultSort(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Boolean)">
            <summary>
            Determines the sort direction and sort property name and adds a sort
            description to the Items>SortDescriptions Collection. Clears all the 
            existing sort descriptions.
            </summary>
            <param name="column"></param>
            <param name="clearExistingSortDescriptions"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnItemsSortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription collection changed listener. Ensures that GroupingSortDescriptionIndices
            is in sync with SortDescriptions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RemoveGroupingSortDescriptions">
            <summary>
            Method to remove all the SortDescriptions which were added based on GroupDescriptions
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanConvertToSortDescription(System.Windows.Data.PropertyGroupDescription)">
            <summary>
            Helper method which determines if one can create a SortDescription out of
            a GroupDescription.
            </summary>
            <param name="propertyGroupDescription"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AddGroupingSortDescriptions">
            <summary>
            Method to add SortDescriptions based on GroupDescriptions.
            Only PropertGroupDescriptions with no ValueConverter and with
            Oridinal comparison are considered suitable.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RegenerateGroupingSortDescriptions">
            <summary>
            Method to regenrated the SortDescriptions based on the GroupDescriptions
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnItemsGroupDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            CollectionChanged listener for GroupDescriptions of DataGrid.
            Regenerates Grouping based sort descriptions is required.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AutoGenerateColumnsProperty">
            <summary>
                The DependencyProperty that represents the AutoGenerateColumns property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnAutoGeneratedColumns(System.EventArgs)">
            <summary>
            The polumorphic method which raises the AutoGeneratedColumns event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnAutoGeneratingColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs)">
            <summary>
            The polymorphic method which raises the AutoGeneratingColumn event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MeasureOverride(System.Windows.Size)">
            <summary>
                Determines the desired size of the control given a constraint.
            </summary>
            <remarks>
                On the first measure:
                - Performs auto-generation of columns if needed.
                - Coerces CanUserAddRows and CanUserDeleteRows.
                - Updates the NewItemPlaceholder.
            </remarks>
            <param name="availableSize">The available space.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ClearSortDescriptionsOnItemsSourceChange">
            <summary>
                Helper method to clear SortDescriptions and all related
                member when ItemsSource changes
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCoerceItemsSourceProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coercion callback for ItemsSource property
            </summary>
            <remarks>
                SortDescriptions and GroupDescriptions are supposed to be
                cleared in PropertyChangedCallback or OnItemsSourceChanged
                virtual. But it seems that the SortDescriptions are applied
                to the new CollectionView due to new ItemsSource in 
                PropertyChangedCallback of base class (which would execute
                before PropertyChangedCallback of this class) and before calling
                OnItemsSourceChanged virtual. Hence handling it in Coercion callback.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            The polymorphic method which gets called whenever the ItemsSource gets changed.
            We regenerate columns if required when ItemsSource gets changed.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The event listener to ItemsSource collection changed event which performs deffered auto generation
            and also unhooks it self as needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AddAutoColumns">
            <summary>
            Method which generated auto columns and adds to the data grid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DeleteAutoColumns">
            <summary>
            Method which deletes all the auto generated columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RegenerateAutoColumns">
            <summary>
            Method which regenerates the columns for the datagrid
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GenerateColumns(System.ComponentModel.IItemProperties)">
            <summary>
            Helper method which generates columns for a given IItemProperties
            </summary>
            <param name="iItemProperties"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GenerateColumns(System.ComponentModel.IItemProperties,ExtendedGrid.Microsoft.Windows.Controls.DataGrid,System.Collections.ObjectModel.Collection{ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn})">
            <summary>
            Helper method which generates columns for a given IItemProperties and adds
            them either to a datagrid or to a collection of columns as specified by the flag.
            </summary>
            <param name="dataGrid"></param>
            <param name="iItemProperties"></param>
            <param name="columnCollection"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnAutoGenerateColumnsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The event listener which listens to the change in the AutoGenerateColumns flag
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.FrozenColumnCountProperty">
            <summary>
            Dependency Property fro FrozenColumnCount Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCoerceFrozenColumnCount(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion call back for FrozenColumnCount property, which ensures that it is never more that column count
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnFrozenColumnCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback fro FrozenColumnCount
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ValidateFrozenColumnCount(System.Object)">
            <summary>
            Validation call back for frozen column count
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffsetPropertyKey">
            <summary>
            Dependency Property key for NonFrozenColumnsViewportHorizontalOffset Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffsetProperty">
            <summary>
            Dependency property for NonFrozenColumnsViewportHorizontalOffset Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnApplyTemplate">
            <summary>
            Override of OnApplyTemplate which clear the scroll host member
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.EnableRowVirtualizationProperty">
            <summary>
                Dependency property for EnableRowVirtualization
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnEnableRowVirtualizationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for EnableRowVirtualization.
                Keeps VirtualizingStackPanel.IsVirtualizingProperty in sync.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCoerceIsVirtualizingProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coercion callback for VirtualizingStackPanel.IsVirtualizingProperty
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.EnableColumnVirtualizationProperty">
            <summary>
                Dependency property for EnableColumnVirtualization
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnEnableColumnVirtualizationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for EnableColumnVirtualization.
                Gets VirtualizingStackPanel.IsVirtualizingProperty for cells presenter and
                headers presenter in sync.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserReorderColumnsProperty">
            <summary>
            Dependency Property for CanUserReorderColumns Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DragIndicatorStyleProperty">
            <summary>
            Dependency Property for DragIndicatorStyle property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty">
            <summary>
            Dependency Property for DropLocationIndicatorStyle property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ClipboardCopyModeProperty">
            <summary>
                The DependencyProperty that represents the ClipboardCopyMode property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCanExecuteCopy(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            This virtual method is called when ApplicationCommands.Copy command query its state.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnExecutedCopy(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            This virtual method is called when ApplicationCommands.Copy command is executed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.OnCopyingRowClipboardContent(ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs)">
            <summary>
            This method is called to prepare the clipboard content for each selected row.
            If ClipboardCopyMode is set to ClipboardCopyMode, then it is also called to prepare the column headers
            </summary>
            <param name="args">Contains the necessary information for generating the row clipboard content.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelActualWidthProperty">
            <summary>
            Dependency Property for CellsPanelActualWidth property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelActualWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for CellsPanelActualWidth property
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelHorizontalOffsetPropertyKey">
            <summary>
                Dependency Property Key for CellsPanelHorizontalOffset property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelHorizontalOffsetProperty">
            <summary>
                Dependency Property for CellsPanelHorizontalOffset
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.QueueInvalidateCellsPanelHorizontalOffset">
            <summary>
                Helper method which queue a request to dispatcher to
                invalidate the cellspanel offset if not already queued
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InvalidateCellsPanelHorizontalOffset(System.Object)">
            <summary>
                Dispatcher call back method which recomputes the CellsPanelOffset
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetAnyCellOrColumnHeader">
            <summary>
            Helper method which return any one of the cells or column headers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GetViewportWidthForColumns">
            <summary>
            Helper method which returns the width of the viewport which is available for the columns to render
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.Columns">
            <summary>
                A collection of column definitions describing the individual 
                columns of each row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InternalColumns">
            <summary>
                Returns the column collection without having to upcast from ObservableCollection
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserResizeColumns">
            <summary>
                A property that specifies whether the user can resize columns in the UI by dragging the column headers.
            </summary>
            <remarks>
                This does not affect whether column widths can be changed programmatically via a property such as Column.Width.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnWidth">
            <summary>
                Specifies the width of the header and cells within all the columns.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MinColumnWidth">
            <summary>
                Specifies the minimum width of the header and cells within all columns.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MaxColumnWidth">
            <summary>
                Specifies the maximum width of the header and cells within all columns.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnDisplayIndexChanged">
            <summary>
                Event that is fired when the DisplayIndex on one of the DataGrid's Columns changes.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DisplayIndexMap">
            <summary>
                A map of display index (key) to index in the column collection (value).  
                Used by the CellsPanel to quickly find a child from a column display index.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeadersPresenter">
            <summary>
                Reference to the ColumnHeadersPresenter. The presenter sets this when it is created.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GridLinesVisibility">
            <summary>
                Specifies the visibility of the DataGrid's grid lines
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalGridLinesBrush">
            <summary>
            Specifies the Brush used to draw the horizontal grid lines
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.VerticalGridLinesBrush">
            <summary>
            Specifies the Brush used to draw the vertical grid lines
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowStyle">
            <summary>
                Equivalent of ItemContainerStyle.
            </summary>
            <remarks>
                If this property has a non-null value, it will override the value
                of ItemContainerStyle.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowValidationErrorTemplate">
            <summary>
            Template used to visually indicate an error in row Validation.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowValidationRules">
            <summary>
                Validation rules that are run on each DataGridRow.  If DataGrid.ItemBindingGroup is used, RowValidationRules is ignored.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowStyleSelector">
            <summary>
                Equivalent of ItemContainerStyleSelector.
            </summary>
            <remarks>
                If this property has a non-null value, it will override the value
                of ItemContainerStyleSelector.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowBackground">
            <summary>
                The default row background brush.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AlternatingRowBackground">
            <summary>
                The default row background brush for use on every other row.
            </summary>
            <remarks>
                Setting this property to a non-null value will coerce AlternationCount to 2.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeight">
            <summary>
                The default height of a row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MinRowHeight">
            <summary>
                The default minimum height of a row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.PlaceholderVisibility">
            <summary>
                The NewItemPlaceholder row uses this to set its visibility while it's preparing.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.LoadingRow">
            <summary>
                Event that is fired just before a row is prepared.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UnloadingRow">
            <summary>
                Event that is fired just before a row is cleared.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderWidth">
            <summary>
                The default width of a row header.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderActualWidth">
            <summary>
                The actual width of row headers used for binding.  This is computed from the measure of all the visible row headers.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeaderHeight">
            <summary>
                The default height of a column header.
            </summary>
        </member>
        <!-- 对于成员“P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HeadersVisibility”忽略有格式错误的 XML 注释 -->
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ShouldSelectRowHeader">
            <summary>
                Determines whether the selection change caused by keyboard input should select a full row (or full rows).
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellStyle">
            <summary>
                A style to apply to all cells in the DataGrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ColumnHeaderStyle">
            <summary>
                A style to apply to all column headers in the DataGrid
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderStyle">
            <summary>
                A style to apply to all row headers in the DataGrid
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderTemplate">
            <summary>
                The object representing the Row Header template.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowHeaderTemplateSelector">
            <summary>
                The object representing the Row Header template selector.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.FocusBorderBrushKey">
            <summary>
                The default style references this brush to create a thicker border
                around the focused cell.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HeadersVisibilityConverter">
            <summary>
                A converter which converts DataGridHeadersVisibility to VisibilityConverter based on a ConverterParameter.
            </summary>
            <remarks>
                This can be used in the DataGrid's template to control which parts of the DataGrid are visible for a given DataGridHeadersVisibility.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsScrollingConverter">
            <summary>
                A converter which converts bool to SelectiveScrollingOrientation based on a ConverterParameter.
            </summary>
            <remarks>
                This can be used in the DataGrid's template to control how the RowDetails selectively scroll based on a bool.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalScrollBarVisibility">
            <summary>
                Defines the behavior that determines the visibility of horizontal ScrollBars.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.VerticalScrollBarVisibility">
            <summary>
                Defines the behavior that determines the visibility of vertical ScrollBars.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HandlesScrolling">
            <summary>
                Prevents the ScrollViewer from handling keyboard input.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InternalItemsHost">
            <summary>
                Workaround for not having access to ItemsControl.ItemsHost.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InternalScrollHost">
            <summary>
                Workaround for not having access to ItemsControl.ScrollHost.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InternalScrollContentPresenter">
            <summary>
                Workaround for not having access to ScrollContentPresenter
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.HorizontalScrollOffset">
            <summary>
                The HorizontalOffset of the scroll viewer
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DeleteCommand">
            <summary>
                A command that, when invoked, will delete the current row.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowEditEnding">
            <summary>
                Raised just before row editing is ended.
                Gives handlers the opportunity to cancel the operation.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellEditEnding">
            <summary>
                Raised just before cell editing is ended.
                Gives handlers the opportunity to cancel the operation.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.IsReadOnly">
            <summary>
                Whether the DataGrid's rows and cells can be placed in edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentItem">
            <summary>
                The object (or row) that, if not in edit mode, can be edited.
            </summary>
            <remarks>
                This is the data item for the row that either has or contains focus.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentColumn">
            <summary>
                The column of the CurrentItem (row) that corresponds with the current cell.
            </summary>
            <remarks>
                null indicates that a cell does not have focus. The row may still have focus.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentCell">
            <summary>
                The cell that, if not in edit mode, can be edited.
            </summary>
            <remarks>
                The value returned is a structure that provides enough information to describe
                the cell. It is neither an actual reference to the cell container nor the value
                displayed in a given cell.
            </remarks>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CurrentCellChanged">
            <summary>
                An event to notify that the value of CurrentCell changed.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.BeginningEdit">
            <summary>
                Called just before a cell will change to edit mode
                to allow handlers to prevent the cell from entering edit mode.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.PreparingCellForEdit">
            <summary>
                Called after a cell has changed to editing mode to allow
                handlers to modify the contents of the cell.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.FocusedCell">
            <summary>
                Cell in DataGrid which has logical focus
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserAddRows">
            <summary>
                Whether the end-user can add new rows to the ItemsSource.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserDeleteRows">
            <summary>
                Whether the end-user can delete rows from the ItemsSource.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.InitializingNewItem">
            <summary>
                An event that is raised when a new item is created so that
                developers can initialize the item with custom default values.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsVisibilityMode">
            <summary>
                Determines which visibility mode the Row's details use.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AreRowDetailsFrozen">
            <summary>
                Controls if the row details scroll.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsTemplate">
            <summary>
                Template used for the Row details.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsTemplateSelector">
            <summary>
                TemplateSelector used for the Row details
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.LoadingRowDetails">
            <summary>
                Event that is fired just before the details of a Row is shown
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.UnloadingRowDetails">
            <summary>
                Event that is fired just before the details of a Row is hidden
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RowDetailsVisibilityChanged">
            <summary>
                Event that is fired when the visibility of a Rows details changes.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserResizeRows">
            <summary>
                A property that specifies whether the user can resize rows in the UI by dragging the row headers.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectedCells">
            <summary>
                The currently selected cells.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectedCellsChanged">
            <summary>
                Event that fires when the SelectedCells collection changes.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectAllCommand">
            <summary>
                A command that, when invoked, will select all items in the DataGrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectionMode">
            <summary>
                Defines the selection behavior.
            </summary>
            <remarks>
                The SelectionMode and the SelectionUnit properties together define
                the selection behavior for the DataGrid.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.SelectionUnit">
            <summary>
                Defines the selection behavior.
            </summary>
            <remarks>
                The SelectionMode and the SelectionUnit properties together define
                the selection behavior for the DataGrid.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ShouldExtendSelection">
            <summary>
                SHIFT is down or performing a drag selection.
                Multiple items can be selected.
                There is a selection anchor.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ShouldMinimallyModifySelection">
            <summary>
                CTRL is down.
                Previous selection should not be cleared, or a selected item should be toggled.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.MouseOverRow">
            <summary>
                The row that the mouse is over.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.RelativeMousePosition">
            <summary>
                The mouse position relative to the ItemsHost.
            </summary>
            <remarks>
                Relies on InternalItemsHost.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserSortColumns">
            <summary>
            The property which determines whether the datagrid can be sorted by 
            cells in the columns or not
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.GroupingSortDescriptionIndices">
            <summary>
            List which holds all the indices of SortDescriptions which were
            added for the sake of GroupDescriptions
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AutoGeneratedColumns">
            <summary>
            This event will be raised whenever auto generation of columns gets completed
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AutoGeneratingColumn">
            <summary>
            This event will be raised for each column getting auto generated
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.AutoGenerateColumns">
            <summary>
            The property which determines whether the columns are to be auto generated or not.
            Setting of the property actually generates or deletes columns.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DeferAutoGeneration">
            <summary>
            Private property to hook and unhook collection changed event on ItemsSources CollectionChanged
            event when ever _deferAutoGeneration flag changes.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.FrozenColumnCount">
            <summary>
            Property which determines the number of columns which are frozen from the beginning in order of display
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffset">
            <summary>
            Property which gets/sets the start x coordinate of non frozen columns in view port
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.EnableRowVirtualization">
            <summary>
                Property which determines if row virtualization is enabled or disabled
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.EnableColumnVirtualization">
            <summary>
                Property which determines if column virtualization is enabled or disabled
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CanUserReorderColumns">
            <summary>
            The property which determines if an end user can re-order columns or not.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DragIndicatorStyle">
            <summary>
            The style property which would be applied on the column header drag indicator
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.DropLocationIndicatorStyle">
            <summary>
            The style property which would be applied on the column header drop location indicator.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ClipboardCopyMode">
            <summary>
            The property which determines how DataGrid content is copied to the Clipboard.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CopyingRowClipboardContent">
            <summary>
            This event is raised by OnCopyingRowClipboardContent method after the default row content is prepared.
            Event listeners can modify or add to the row clipboard content
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelActualWidth">
            <summary>
            The property which represents the actual width of the cells panel,
            to be used by headers presenter
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelHorizontalOffset">
            <summary>
                Property which caches the cells panel horizontal offset
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.CellsPanelHorizontalOffsetComputationPending">
            <summary>
                Property which indicates whether a request to
                invalidate CellsPanelOffset is already in queue or not.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGrid.ChangingSelectedCellsHelper">
            <summary>
                Handles tracking defered selection change notifications for selected cells.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Base.CustomDataGrid.FrozenRowCountProperty">
            <summary>
            Dependency Property fro FrozenRowCount Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Base.CustomDataGrid._problemWithFrozenRowCount">
            <summary>
            Property which determines the number of rows which are frozen from 
            the beginning in order of display
            </summary>
            
        </member>
        <member name="M:ExtendedGrid.Base.CustomDataGrid.OnCoerceFrozenRowCount(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion call back for FrozenRowCount property, which ensures that 
            it is never more that Item count
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Base.CustomDataGrid.OnFrozenRowCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback fro FrozenRowCount
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Base.CustomDataGrid.ValidateFrozenRowCount(System.Object)">
            <summary>
            Validation call back for frozen row count
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:ExtendedGrid.Base.CustomDataGrid.NonFrozenRowsViewportVerticalOffsetPropertyKey">
            <summary>
            Dependency Property key for NonFrozenColumnsViewportHorizontalOffset Property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Base.CustomDataGrid.NonFrozenRowsViewportVerticalOffsetProperty">
            <summary>
            Dependency property for NonFrozenRowsViewportVerticalOffset Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Base.CustomDataGrid.OnVerticalScroll">
            <summary>
            Method which gets called when Vertical scroll occurs on the scroll viewer of datagrid.
            Forwards the call to rows and header presenter.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Base.CustomDataGrid.NonFrozenRowsViewportVerticalOffset">
            <summary>
            Property which gets/sets the start y coordinate of non frozen rows in view port
            </summary>
        </member>
        <member name="M:ExtendedGrid.Base.CopyDataGrid.OnCanExecutePaste(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            This virtual method is called when ApplicationCommands.Paste command query its state.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ExtendedGrid.Base.CopyDataGrid.OnExecutedPaste(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            This virtual method is called when ApplicationCommands.Paste command is executed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter">
            <summary>
            Panel that lays out individual rows top to bottom.  
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.InternalBringIndexIntoView(System.Int32)">
            <summary>
                Calls the protected method BringIndexIntoView.
            </summary>
            <param name="index">The index of the row to scroll into view.</param>
            <remarks>
                BringIndexIntoView should be callable either from the ItemsControl
                or directly on the panel. This was not done in WPF, so we are
                building this internally for the DataGrid. However, if a public
                way of calling BringIndexIntoView becomes a reality, then
                this method is no longer needed.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
                This method is invoked when the IsItemsHost property changes.
            </summary>
            <param name="oldIsItemsHost">The old value of the IsItemsHost property.</param>
            <param name="newIsItemsHost">The new value of the IsItemsHost property.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.OnViewportSizeChanged(System.Windows.Size,System.Windows.Size)">
            <summary>
                Override of ViewportSizeChanged method which enqueues a dispatcher operation to redistribute
                the width among columns.
            </summary>
            <param name="oldViewportSize">viewport size before the change</param>
            <param name="newViewportSize">viewport size after the change</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.OnCleanUpVirtualizedItem(System.Windows.Controls.CleanUpVirtualizedItemEventArgs)">
            <summary>
                Override method to suppress the cleanup of rows
                with validation errors.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.AvailableSize">
            <summary>
                Property which returns the last measure input size
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.CustomDataGridRowsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Content arrangement.
            </summary>
            <param name="arrangeSize">Arrange size</param>
        </member>
        <member name="M:ExtendedGrid.Classes.CustomDataGridRowsPresenter.OnViewportOffsetChanged(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            override of ViewportOffsetChanged method which forwards the call to datagrid on vertical scroll
            </summary>
            <param name="oldViewportOffset"></param>
            <param name="newViewportOffset"></param>
        </member>
        <member name="T:ExtendedGrid.Classes.DataGridBehavior">
            <summary>
            Class for displaying the row numbers in the row headers.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.DataGridBehavior.GetRowNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the DisplayRowNumberProperty's value.
            </summary>
            <param name="target">The target to get the value from</param>
            <returns>The value</returns>
        </member>
        <member name="M:ExtendedGrid.Classes.DataGridBehavior.SetRowNumber(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the DisplayRowNumberProperty to value.
            </summary>
            <param name="target">The target to set the property of</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:ExtendedGrid.Classes.DataGridBehavior.OnRowNumbersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Subscribes or unsubscribes the LoadingRow and UnloadingRow events to the RefreshRowNumbers method
            in order to properly update the row numbers when rows are added or deleted.
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="M:ExtendedGrid.Classes.DataGridBehavior.RefreshRowNumbers(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEventArgs)">
            <summary>
            Event handler that handles refreshing the row numbers in the row headers.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.  Note that this epsilon is proportional
            to the numbers themselves to that AreClose survives scalar multiplication.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the AreClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            LessThan - Returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose - Returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.IsOne(System.Double)">
            <summary>
            IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
            but this is faster.
            </summary>
            <returns>
            bool - the result of the AreClose comparision.
            </returns>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:ExtendedGrid.Classes.DoubleUtil.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compares two points for fuzzy equality.  This function
            helps compensate for the fact that double values can 
            acquire error when operated upon
            </summary>
            <param name='point1'>The first point to compare</param>
            <param name='point2'>The second point to compare</param>
            <returns>Whether or not the two points are equal</returns>
        </member>
        <member name="T:ExtendedGrid.Classes.ScrollingPreviewData">
            <summary>
                Provides data that should be useful to templates displaying
                a preview.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewData.UpdateScrollingValues(System.Windows.Controls.Primitives.ScrollBar)">
            <summary>
                Updates Offset, Viewport, and Extent.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewData.UpdateItem(System.Windows.Controls.ItemsControl,System.Boolean)">
            <summary>
                Updates FirstItem and LastItem based on the
                Offset and Viewport properties.
            </summary>
            <param name="itemsControl">The ItemsControl that contains the data items.</param>
            <param name="vertical">vertical </param>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewData.FindParent``1(System.Windows.Media.Visual)">
            <summary>
                Returns the parent of the specified type.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewData.OnPropertyChanged(System.String)">
            <summary>
                Raises the PropertyChanged event.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:ExtendedGrid.Classes.ScrollingPreviewData.Offset">
            <summary>
                The ScrollBar's offset.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Classes.ScrollingPreviewData.Viewport">
            <summary>
                The size of the current viewport.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Classes.ScrollingPreviewData.Extent">
            <summary>
                The entire scrollable range.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Classes.ScrollingPreviewData.FirstItem">
            <summary>
                The first visible item in the viewport.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Classes.ScrollingPreviewData.LastItem">
            <summary>
                The last visible item in the viewport.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Classes.ScrollingPreviewData.PropertyChanged">
            <summary>
                Notifies listeners of changes to properties on this object.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Classes.ScrollingPreviewService">
            <summary>
                Displays a ToolTip next to the ScrollBar thumb while it is being dragged.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Classes.ScrollingPreviewService.VerticalScrollingPreviewTemplateProperty">
            <summary>
                Allows for specifying a ContentTemplate for a ToolTip that will appear next to the 
                vertical ScrollBar while dragging the thumb.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Classes.ScrollingPreviewService.HorizontalScrollingPreviewTemplateProperty">
            <summary>
                Allows for specifying a ContentTemplate for a ToolTip that will appear next to the 
                horizontal ScrollBar while dragging the thumb.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Classes.ScrollingPreviewService.WaitForVisibleScrollBarProperty">
            <summary>
                Storage for the property change handler if waiting for a ScrollBar to appear
                for the first time.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewService.FindName``1(System.String,System.Windows.Controls.Control)">
            <summary>
                Returns the template element of the given name within the Control.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Classes.ScrollingPreviewService.FindElementOfType``1(System.Windows.FrameworkElement)">
            <summary>
                Searches the subtree of an element (including that element) 
                for an element of a particluar type.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer">
            <summary>
            AutomationPeer for DataGrid
            Supports Grid, Table, Selection and Scroll patters
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
            Default contructor
            </summary>
            <param name="owner">DataGrid</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridAutomationPeer.CalculateVisibleBoundingRect(System.Windows.UIElement)">
            <summary>
             This eliminates the part of bounding rectangle if it is at all being overlapped/clipped by any of the visual ancestor up in the parent chain
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellAutomationPeer">
            <summary>
            AutomationPeer for DataGridCell
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell)">
            <summary>
            AutomationPeer for DataGridCell.
            This automation peer should not be part of the automation tree.
            It should act as a wrapper peer for DataGridCellItemAutomationPeer
            </summary>
            <param name="owner">DataGridCell</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellAutomationPeer.IsOffscreenCore">
            
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer">
            <summary>
            AutomationPeer for a cell item in a DataGridRow.
            Cell may not have a visual container if it is scrolled out of view.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.#ctor(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            AutomationPeer for an item in a DataGrid
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetAcceleratorKeyCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetAccessKeyCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetAutomationControlTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetAutomationIdCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetBoundingRectangleCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetClickablePointCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetHelpTextCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetItemStatusCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetItemTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetLabeledByCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetLocalizedControlTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetNameCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetOrientationCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.HasKeyboardFocusCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsControlElementCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsEnabledCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsKeyboardFocusableCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsOffscreenCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsPasswordCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.IsRequiredForFormCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridCellItemAutomationPeer.SetFocusCore">
            
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer">
            <summary>
            AutomationPeer for DataGridColumnHeader
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader)">
            <summary>
            AutomationPeer for DataGridColumnHeader
            </summary>
            <param name="owner">DataGridColumnHeader</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer">
            <summary>
            AutomationPeer for DataGridColumnHeadersPresenter
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter)">
            <summary>
            AutomationPeer for DataGridColumnHeadersPresenter
            </summary>
            <param name="owner">DataGridColumnHeadersPresenter</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer">
            <summary>
            AutomationPeer for DataGridDetailsPresenter
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter)">
            <summary>
            AutomationPeer for DataGridDetailsPresenter
            </summary>
            <param name="owner">DataGridDetailsPresenter</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer">
            <summary>
            AutomationPeer for an item in a DataGrid
            This automation peer correspond to a row data item which may not have a visual container
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.#ctor(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
            AutomationPeer for an item in a DataGrid
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAcceleratorKeyCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAccessKeyCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationControlTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationIdCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetBoundingRectangleCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClickablePointCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetHelpTextCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemStatusCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLabeledByCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLocalizedControlTypeCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetNameCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetOrientationCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.HasKeyboardFocusCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsControlElementCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsEnabledCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsKeyboardFocusableCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsOffscreenCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsPasswordCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.IsRequiredForFormCore">
            
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridItemAutomationPeer.SetFocusCore">
            
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowAutomationPeer">
            <summary>
            AutomationPeer for DataGridRow
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridRow)">
            <summary>
            AutomationPeer for DataGridRow
            </summary>
            <param name="owner">DataGridRow</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer">
            <summary>
            AutomationPeer for DataGridRowHeader
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.#ctor(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader)">
            <summary>
            AutomationPeer for DataGridRowHeader
            </summary>
            <param name="owner">DataGridRowHeader</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.BooleanToSelectiveScrollingOrientationConverter">
            <summary>
                Converts Boolean to SelectiveScrollingOrientation based on the given parameter.
            </summary> 
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.BooleanToSelectiveScrollingOrientationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert Boolean to SelectiveScrollingOrientation
            </summary>
            <param name="value">Boolean</param>
            <param name="targetType">SelectiveScrollingOrientation</param>
            <param name="parameter">SelectiveScrollingOrientation that should be used when the Boolean is true</param>
            <param name="culture">null</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.BooleanToSelectiveScrollingOrientationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Not implemented
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.ColumnHeaderCollection">
            <summary>
                Collection used as the ItemsSource of The DataGridColumnHeadersPresenter.  This is a wrapper around the Column collection; each item
                returns the corresponding Column.Header.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ColumnHeaderCollection.NotifyHeaderPropertyChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Header property on a Column changes.  Causes us to fire a CollectionChanged event to specify that an item has been replaced.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ColumnHeaderCollection.OnColumnsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Helper to raise a CollectionChanged event when the columns collection has changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.ColumnHeaderCollection.CollectionChanged">
            <summary>
            INotifyCollectionChanged CollectionChanged event
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1">
            <summary>
                Represents a node in a linked list used to track active containers.
                Containers should instantiate and references these.
                Parents hold onto the linked list.
                
                The list is iterated in order to call a variety of methods on containers
                in response to changes on the parent.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.StartTracking(ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking{`0}@)">
            <summary>
                Adds this tracker to the list of active containers.
            </summary>
            <param name="root">The root of the list.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.StopTracking(ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking{`0}@)">
            <summary>
                Removes this tracker from the list of active containers.
            </summary>
            <param name="root">The root of the list.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.Debug_AssertIsInList(ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking{`0})">
            <summary>
                Asserts that the container represented by this tracker is in the list represented by the given root.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.Debug_AssertNotInList(ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking{`0})">
            <summary>
                Asserts that the container represented by this tracker is not in the list represented by the given root.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.IsInList(ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking{`0})">
            <summary>
                Checks that this tracker is present in the list starting with root.  It's a linear walk through the list, so should be used
                mostly for debugging
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.Container">
            <summary>
                The row container that this object represents.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.Next">
            <summary>
                The next node in the list.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.ContainerTracking`1.Previous">
            <summary>
                The previous node in the list.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs">
            <summary>
            The event args class to be used with AutoGeneratingColumn event.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.#ctor(System.String,System.Type,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            Public constructor
            </summary>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
            <param name="column"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Column">
            <summary>
            Column which is being generated
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyName">
            <summary>
            Property for which the column is getting generated
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyType">
            <summary>
            Type of the property for which the column is getting generated
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyDescriptor">
            <summary>
            Descriptor of the property for which the column is gettign generated
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Cancel">
            <summary>
            Flag to indicated if generation of this column has to be cancelled
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs">
            <summary>
                Provides information just before a cell enters edit mode.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs)">
            <summary>
                Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that is about to enter edit mode.</param>
            <param name="row">The row container of the cell container that is about to enter edit mode.</param>
            <param name="editingEventArgs">The event arguments, if any, that led to the cell entering edit mode.</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs.Cancel">
            <summary>
                When true, prevents the cell from entering edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs.Column">
            <summary>
                The column of the cell that is about to enter edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs.Row">
            <summary>
                The row container of the cell container that is about to enter edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBeginningEditEventArgs.EditingEventArgs">
            <summary>
                Event arguments, if any, that led to the cell entering edit mode.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn">
            <summary>
                A base class for specifying column definitions for certain standard
                types that do not allow arbitrary templates.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn">
            <summary>
                A base class for specifying the column definitions.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderProperty">
            <summary>
                The DependencyProperty that represents the Header property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderStyleProperty">
            <summary>
                The DependencyProperty that represents the HeaderStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderStringFormatProperty">
            <summary>
                The DependencyProperty that represents the HeaderStringFormat property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderTemplateProperty">
            <summary>
                The DependencyProperty that represents the HeaderTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderTemplateSelectorProperty">
            <summary>
                The DependencyProperty that represents the HeaderTemplateSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CellStyleProperty">
            <summary>
                The DependencyProperty that represents the CellStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsReadOnlyProperty">
            <summary>
                The DependencyProperty that represents the IsReadOnly property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceIsReadOnly(System.Boolean)">
            <summary>
                Subtypes can override this to force IsReadOnly to be coerced to true.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.WidthProperty">
            <summary>
                The DependencyProperty that represents the Width property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SetWidthInternal(ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
            Internal method which sets the column's width
            without actual redistribution of widths among other
            columns
            </summary>
            <param name="width"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed call back for Width property which notification propagation
            and does the redistribution of widths among other columns if needed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.MinWidthProperty">
            <summary>
                The DependencyProperty that represents the MinWidth property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnMinWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed call back for MinWidth property which notification propagation
            and does the redistribution of widths among other columns if needed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.MaxWidthProperty">
            <summary>
                The DependencyProperty that represents the MaxWidth property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnMaxWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed call back for MaxWidth property which notification propagation
            and does the redistribution of widths among other columns if needed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CoerceDesiredOrDisplayWidthValue(System.Double,System.Double,ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType)">
            <summary>
                Helper method which coerces the DesiredValue or DisplayValue
                of the width.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceWidth(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the WidthProperty based on the DataGrid transferred property rules
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceMinWidth(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the MinWidthProperty based on the DataGrid transferred property rules
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceMaxWidth(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the MaxWidthProperty based on the DataGrid transferred property rules
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.ValidateMinWidth(System.Object)">
            <summary>
                Validates that the minimum width is an acceptable value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.ValidateMaxWidth(System.Object)">
            <summary>
                Validates that the maximum width is an acceptable value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.GetConstraintWidth(System.Boolean)">
            <summary>
                Retrieve the proper measure constraint for cells.
            </summary>
            <param name="isHeader">Whether a header constraint or a normal cell constraint is requested.</param>
            <returns>The value to use as the width when creating a measure constraint.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.UpdateDesiredWidthForAutoColumn(System.Boolean,System.Double)">
            <summary>
                Notifies the column of a cell's desired width.
                Updates the actual width if necessary
            </summary>
            <param name="isHeader">Whether the cell is a header or not.</param>
            <param name="pixelWidth">The desired size of the cell.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.UpdateWidthForStarColumn(System.Double,System.Double,System.Double)">
            <summary>
                Notifies the column that Width="*" columns have a new actual width.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.GetCellContent(System.Object)">
            <summary>
                Retrieves the visual tree that was generated for a particular row and column.
            </summary>
            <param name="dataItem">The row that corresponds to the desired cell.</param>
            <returns>The element if found, null otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.GetCellContent(ExtendedGrid.Microsoft.Windows.Controls.DataGridRow)">
            <summary>
                Retrieves the visual tree that was generated for a particular row and column.
            </summary>
            <param name="dataGridRow">The row that corresponds to the desired cell.</param>
            <returns>The element if found, null otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.BuildVisualTree(System.Boolean,System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridCell)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
            <param name="isEditing">Whether the editing version is being requested.</param>
            <param name="dataItem">The data item for the cell.</param>
            <param name="cell">The cell container that will receive the tree.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
                Called when a cell has just switched to edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>The unedited value of the cell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
                Called when a cell's value is to be restored to its original value,
                just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="uneditedValue">The original, unedited value of the cell.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CommitCellEdit(System.Windows.FrameworkElement)">
            <summary>
                Called when a cell's value is to be committed, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnNotifyCellPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the DataGrid and the Cells about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnNotifyColumnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the DataGrid and the Column Headers about property changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnNotifyColumnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies parts that respond to changes in the column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
              General notification for DependencyProperty changes from the grid and/or column.  
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.NotifyPropertyChanged(System.String)">
            <summary>
            Method which propogates the property changed notification to datagrid
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.NotifyPropertyChangeForRefreshContent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method used as property changed callback for properties which need RefreshCellContent to be called
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Method which updates the cell for property changes
            </summary>
            <param name="element"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SyncProperties">
            <summary>
                Ensures that any properties that may be influenced by a change to the DataGrid are syncronized.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DisplayIndexProperty">
            <summary>
                The DependencyProperty that represents the Width property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceDisplayIndex(System.Windows.DependencyObject,System.Object)">
            <summary>
                We use the coersion callback to validate that the DisplayIndex of a column is between 0 and DataGrid.Columns.Count
                The default value is -1; this value is only legal as the default or when the Column is not attached to a DataGrid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DisplayIndexChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the DataGrid that the display index for this column changed.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SortMemberPathProperty">
            <summary>
            Dependency property for SortMemberPath
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserSortProperty">
            <summary>
            Dependecy property for CanUserSort
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceCanUserSort(System.Windows.DependencyObject,System.Object)">
            <summary>
            The Coercion callback for CanUserSort property. 
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCanUserSortPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for CanUserSort property
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SortDirectionProperty">
            <summary>
            Dependency property for SortDirection
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnNotifySortPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SortMemberPath and SortDirection properties
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsAutoGeneratedProperty">
            <summary>
            The DependencyProperty for the IsAutoGenerated Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CreateDefaultColumn(System.ComponentModel.ItemPropertyInfo)">
            <summary>
            Helper Method which creates a default DataGridColumn object for the specified property type.
            </summary>
            <param name="itemProperty"></param>
            <returns></returns>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsFrozenPropertyKey">
            <summary>
            Dependency Property Key for IsFrozen property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsFrozenProperty">
            <summary>
            The DependencyProperty for the IsFrozen Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnNotifyFrozenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for IsFrozen property
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCoerceIsFrozen(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion call back for IsFrozenProperty. Ensures that IsFrozen is set as per the 
            DataGrid's FrozenColumnCount property.
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserReorderProperty">
            <summary>
                The DependencyProperty that represents the CanUserReorder property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DragIndicatorStyleProperty">
            <summary>
                The DependencyProperty that represents the DragIndicatorStyle property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnCopyingCellClipboardContent(System.Object)">
            <summary>
            This method is called for each selected cell in each selected cell to retrieve the default cell content.
            Default cell content is calculated using ClipboardContentBinding.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnPastingCellClipboardContent(System.Object,System.Object)">
            We don't provide default Paste but this public method is exposed to help custom implementation of Paste
            <summary>
            This method stores the cellContent into the item object using ClipboardContentBinding.
            </summary>
            <param name="item"></param>
            <param name="cellContent"></param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserResizeProperty">
            <summary>
            Dependency property for CanUserResize
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.VisibilityProperty">
            <summary>
                Dependency property for Visibility
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.OnVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for Visibility property
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.Header">
            <summary>
                An object that represents the header of this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderStyle">
            <summary>
                The Style for the DataGridColumnHeader
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderStringFormat">
            <summary>
                The string format to apply to the header.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderTemplate">
            <summary>
                The template that defines the visual representation of the header.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.HeaderTemplateSelector">
            <summary>
                DataTemplateSelector that selects which template to use for the Column Header
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CellStyle">
            <summary>
                A style to apply to the container of cells in this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsReadOnly">
            <summary>
                Whether cells in this column can enter edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.Width">
            <summary>
                Specifies the width of the header and cells within this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.MinWidth">
            <summary>
                Specifies the minimum width of the header and cells within this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.MaxWidth">
            <summary>
                Specifies the maximum width of the header and cells within this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.ActualWidth">
            <summary>
                 This is the width that cells and headers should use in Arrange.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DataGridOwner">
            <summary>
                The owning DataGrid control.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DisplayIndex">
            <summary>
                Specifies the display index of this column.
            </summary>
            <remarks>
                A lower display index means a column will appear first (to the left) of columns with a higher display index. 
                Allowable values are from 0 to num columns - 1. (-1 is legal only as the default value and is modified to something else
                when the column is added to a DataGrid's column collection). DataGrid enforces that no two columns have the same display index;
                changing the display index of a column will cause the index of other columns to adjust as well.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SortMemberPath">
            <summary>
            The property which the determines the member to be sorted upon when sorted on this column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserSort">
            <summary>
            The property which determines whether the datagrid can be sorted upon this column or not
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.SortDirection">
            <summary>
            The property for current sort direction of the column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsAutoGenerated">
            <summary>
            This property determines whether the column is autogenerate or not.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsFrozen">
            <summary>
            This property determines whether the column is frozen or not.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserReorder">
            <summary>
            The property which determines if column header can be dragged or not
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.DragIndicatorStyle">
            <summary>
            The style property which would be applied on the column header drag indicator.    
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.ClipboardContentBinding">
            <summary>
                The binding that will be used to get or set cell content for the clipboard
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CopyingCellClipboardContent">
            <summary>
            The event is raised for each selected cell after the cell clipboard content is prepared.
            Event handlers can modify the cell content before it gets stored into the clipboard.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.PastingCellClipboardContent">
            <summary>
            The event is raised for each selected cell before the clipboard content is transfered to the cell.
            Event handlers can modify the clipboard content before it gets stored into the cell content.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.CanUserResize">
            <summary>
            Property which indicates if an end user can resize the column or not
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.Visibility">
            <summary>
                The property which determines if the column is visible or not.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn.IsVisible">
            <summary>
                Helper IsVisible property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.OnBindingChanged(System.Windows.Data.BindingBase,System.Windows.Data.BindingBase)">
            <summary>
                Called when Binding changes.
            </summary>
            <remarks>
                Default implementation notifies the DataGrid and its subtree about the change.
            </remarks>
            <param name="oldBinding">The old binding.</param>
            <param name="newBinding">The new binding.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.ApplyBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
                Assigns the Binding to the desired property on the target object.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.ElementStyleProperty">
            <summary>
                The DependencyProperty for the ElementStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.EditingElementStyleProperty">
            <summary>
                The DependencyProperty for the EditingElementStyle property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.ApplyStyle(System.Boolean,System.Boolean,System.Windows.FrameworkElement)">
            <summary>
                Assigns the ElementStyle to the desired property on the given element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Override which rebuilds the cell's visual tree for Binding change
            </summary>
            <param name="element"></param>
            <param name="propertyName"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.Binding">
            <summary>
                The binding that will be applied to the generated element.
            </summary>
            <remarks>
                This isn't a DP because if it were getting the value would evaluate the binding.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.ElementStyle">
            <summary>
                A style that is applied to the generated element when not editing.
                The TargetType of the style depends on the derived column class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.EditingElementStyle">
            <summary>
                A style that is applied to the generated element when editing.
                The TargetType of the style depends on the derived column class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridBoundColumn.ClipboardContentBinding">
            <summary>
            If base ClipboardContentBinding is not set we use Binding.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell">
            <summary>
                A control for displaying a cell of the DataGrid.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.IProvideDataGridColumn">
            <summary>
                Interface to abstract away the difference between a DataGridCell and a DataGridColumnHeader
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.#cctor">
            <summary>
                Instantiates global information.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.PrepareCell(System.Object,System.Windows.Controls.ItemsControl,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow)">
            <summary>
                Prepares a cell for use.
            </summary>
            <remarks>
                Updates the column reference.
                This overload computes the column index from the ItemContainerGenerator.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.PrepareCell(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Int32)">
            <summary>
                Prepares a cell for use.
            </summary>
            <remarks>
                Updates the column reference.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.ClearCell(ExtendedGrid.Microsoft.Windows.Controls.DataGridRow)">
            <summary>
                Clears the cell of references.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.ColumnPropertyKey">
            <summary>
                The DependencyPropertyKey that allows writing the Column property value.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.ColumnProperty">
            <summary>
                The DependencyProperty for the Columns property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnColumnChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Called when the Column property changes.
                Calls the protected virtual OnColumnChanged.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnColumnChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
                Called due to the cell's column definition changing.
                Not called due to changes within the current column definition.
            </summary>
            <remarks>
                Coerces ContentTemplate and ContentTemplateSelector.
            </remarks>
            <param name="oldColumn">The old column definition.</param>
            <param name="newColumn">The new column definition.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnNotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the Cell of a property change.
            </summary>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnNotifyIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.NotifyPropertyChanged(System.Windows.DependencyObject,System.String,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.BuildVisualTree">
            <summary>
                Builds a column's visual tree if not using templates.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsEditingProperty">
            <summary>
                Represents the IsEditing property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnIsEditingChanged(System.Boolean)">
            <summary>
                Called when the value of IsEditing changes.
            </summary>
            <remarks>
                Coerces the value of ContentTemplate.
            </remarks>
            <param name="isEditing">The new value of IsEditing.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsReadOnlyProperty">
            <summary>
                The DependencyProperty for IsReadOnly.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsSelectedProperty">
            <summary>
                Represents the IsSelected property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.SyncIsSelected(System.Boolean)">
            <summary>
                Used to synchronize IsSelected with the DataGrid.
                Prevents unncessary notification back to the DataGrid.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.SelectedEvent">
            <summary>
                Raised when the item's IsSelected property becomes true.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
                Called when IsSelected becomes true. Raises the Selected event.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.UnselectedEvent">
            <summary>
                Raised when the item's IsSelected property becomes false.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
                Called when IsSelected becomes false. Raises the Unselected event.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure.  This is overridden so that the cell can extend its size to account for a grid line on the right.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange.  This is overriden so that the cell can position its content to account for a grid line on the right.
            </summary>
            <param name="arrangeSize">Arrange size</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                OnRender.  Overriden to draw a vertical line on the right.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnAnyMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                The left mouse button was pressed
            </summary>
            TODO: Consider making a protected virtual.
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
                Reporting text composition.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Reporting a key was pressed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.OnCoerceClip(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion call back for clip property which ensures that the cell overlapping with frozen 
            column gets clipped appropriately.
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.Tracker">
            <summary>
                Used by the DataGridRowGenerator owner to send notifications to the cell container.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.Column">
            <summary>
                The column that defines how this cell should appear.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsEditing">
            <summary>
                Whether the cell is in editing mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsReadOnly">
            <summary>
                Whether the cell can be placed in edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.IsSelected">
            <summary>
                Whether the cell is selected or not.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.Selected">
            <summary>
                Raised when the item's IsSelected property becomes true.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridCell.Unselected">
            <summary>
                Raised when the item's IsSelected property becomes false.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellClipboardEventArgs">
            <summary>
            This class encapsulates a cell information necessary for CopyingCellClipboardContent and PastingCellClipboardContent events
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellClipboardEventArgs.#ctor(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Object)">
            <summary>
            Construct DataGridCellClipboardEventArgs object
            </summary>
            <param name="item"></param>
            <param name="column"></param>
            <param name="content"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellClipboardEventArgs.Content">
            <summary>
            Content of the cell to be set or get from clipboard
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellClipboardEventArgs.Item">
            <summary>
            DataGrid row item containing the cell
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellClipboardEventArgs.Column">
            <summary>
            DataGridColumn containing the cell
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs">
            <summary>
                Provides information just before a cell exits edit mode.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Windows.FrameworkElement,ExtendedGrid.Microsoft.Windows.Controls.DataGridEditAction)">
            <summary>
                Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that is about to exit edit mode.</param>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editingElement">The editing element within the cell.</param>
            <param name="editingUnit">The editing unit that is about to leave edit mode.</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.Cancel">
            <summary>
                When true, prevents the cell from exiting edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.Column">
            <summary>
                The column of the cell that is about to exit edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.Row">
            <summary>
                The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.EditingElement">
            <summary>
                The editing element within the cell. 
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellEditEndingEventArgs.EditAction">
            <summary>
                The edit action when leave edit mode.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo">
            <summary>
                Defines a structure that identifies a specific cell based on row and column data.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.#ctor(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
                Identifies a cell at the column within the row for the specified item.
            </summary>
            <param name="item">The item who's row contains the cell.</param>
            <param name="column">The column of the cell within the row.</param>
            <remarks>
                This constructor will not tie the DataGridCellInfo to any particular
                DataGrid.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell)">
            <summary>
                Creates a structure that identifies the specific cell container.
            </summary>
            <param name="cell">
                A reference to a cell.
                This structure does not maintain a strong reference to the cell.
                Changes to the cell will not affect this structure.
            </param>
            <remarks>
                This constructor will tie the DataGridCellInfo to the specific
                DataGrid that owns the cell container.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.#ctor(System.Object)">
            <summary>
                Used to create an unset DataGridCellInfo.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGrid,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Object)">
            <summary>
                This is used strictly to create the partial CellInfos.
            </summary>
            <remarks>
                This is being kept private so that it is explicit that the
                caller expects invalid data.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.CreatePossiblyPartialCellInfo(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                This is used by CurrentCell if there isn't a valid CurrentItem or CurrentColumn.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.Equals(System.Object)">
            <summary>
                Whether the two objects are equal.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.op_Equality(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo,ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Returns whether the two values are equal.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.op_Inequality(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo,ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Returns whether the two values are not equal.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.GetHashCode">
            <summary>
                Returns a hash code for the structure.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.IsValidForDataGrid(ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Assumes that if the owner matches, then the column and item fields are valid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.Item">
            <summary>
                The item who's row contains the cell.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.Column">
            <summary>
                The column of the cell within the row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.IsValid">
            <summary>
                Whether the structure holds valid information.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo.Unset">
            <summary>
                Used for default values.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel">
            <summary>
                Panel that lays out both cells and column headers. This stacks cells in the horizontal direction and communicates with the 
                relevant DataGridColumn to ensure all rows give cells in a given column the same size.
                It is hardcoded against DataGridCell and DataGridColumnHeader.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure
                
                The logic is to see determinition of realized blocks is needed and do it.
                If not, iterate over the realized block list and for each block generate the
                children and measure them.
            </summary>
            <param name="constraint">Size constraint</param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.MeasureChild(System.Windows.UIElement,System.Windows.Size)">
            <summary>
                Method which measures a given child based on its column width
                
                For auto kind columns it may actually end up measuring twice
                once with positive infinity to determine its actual desired width
                and then again with the available space constraints
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GenerateAndMeasureChildrenForRealizedColumns(System.Windows.Size)">
            <summary>
                Generates children and measures them based on RealizedColumnList of 
                ancestor rows presenter.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.DetermineRealizedColumnsBlockList(System.Windows.Size)">
            <summary>
                Method which determines the realized columns list and
                stores it in ancestor rowpresenter which is to be used
                by other cellpanels to virtualize without recomputation.
                Simultaneously measures the children of this panel.
                
                If the datagrid has star columns, then all cells for all
                realized rows are generated.
                
                For remaining case the logic is to iterate over columns of
                datagrid in DisplayIndex order, as if one is actually arranging
                them, to determine which of them actually fall in viewport.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.BuildRealizedColumnsBlockList(System.Collections.Generic.List{System.Int32})">
            <summary>
                Helper method which creates a list of RealizedColumnsBlock struct
                out of a list on integer indices.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.IndexToGeneratorPositionForStart(System.Windows.Controls.Primitives.IItemContainerGenerator,System.Int32,System.Int32@)">
            <summary>
                Helper method to build generator position out to index
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GenerateChild(System.Windows.Controls.Primitives.IItemContainerGenerator,System.Windows.Size,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.IDisposable@,System.Int32@,System.Windows.Size@)">
            <summary>
                Helper method which generates and measures a
                child of given index
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GenerateChild(System.Windows.Controls.Primitives.IItemContainerGenerator,System.Windows.Size,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32@,System.Windows.Size@)">
            <summary>
                Helper method which generates and measures a
                child of given index
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GenerateChildren(System.Windows.Controls.Primitives.IItemContainerGenerator,System.Int32,System.Int32,System.Windows.Size)">
            <summary>
                Helper method which generates and measures children of 
                a given block of indices
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.AddContainerFromGenerator(System.Int32,System.Windows.UIElement,System.Boolean)">
            <summary>
                Method which adds the given container at the given index
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InsertRecycledContainer(System.Int32,System.Windows.UIElement)">
            <summary>
                Inserts a recycled container in the visual tree
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InsertNewContainer(System.Int32,System.Windows.UIElement)">
            <summary>
                Inserts a new container in the visual tree
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InsertContainer(System.Int32,System.Windows.UIElement,System.Boolean)">
            <summary>
                Inserts a container into the Children collection.  The container is either new or recycled.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ChildIndexFromRealizedIndex(System.Int32)">
            <summary>
                Takes an index from the realized list and returns the corresponding index in the Children collection
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InBlockOrNextBlock(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock},System.Int32,System.Int32@,ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock@,System.Boolean@)">
            <summary>
                Helper method which determines if the given in index
                falls in the given block or in the next block
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.EnsureAtleastOneHeader(System.Windows.Controls.Primitives.IItemContainerGenerator,System.Windows.Size,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
                Method which ensures that atleast one column
                header is generated. Such a generation would
                help in determination of the height.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.EnsureFocusTrail(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.Windows.Size)">
            <summary>
                Method which ensures that all the appropriate
                focus trail cells are realized such that tabbing 
                works.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GenerateChildForFocusTrail(System.Windows.Controls.ItemContainerGenerator,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Windows.Size,System.Int32,System.Int32@)">
            <summary>
                Method which generates the focus trail cell
                if it is not already generated and adds it to 
                the block lists appropriately.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.AddToIndicesListIfNeeded(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
                Helper method which adds the generated
                display index to the the block lists if not
                already present.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.VirtualizeChildren(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock},System.Windows.Controls.Primitives.IItemContainerGenerator)">
            <summary>
                Method which virtualizes the children which are determined to be unused. 
                Eligible candidates for virtualization are those which are not in block list.
                Some exceptions to the criterion are the cells which are in edit mode, or
                if item is its own container.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.CleanupRange(System.Collections.IList,System.Windows.Controls.Primitives.IItemContainerGenerator,System.Int32,System.Int32)">
            <summary>
                Method which cleans up a given range of children
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.DisconnectRecycledContainers">
            <summary>
                Recycled containers still in the InternalChildren collection at the end of Measure should be disconnected
                from the visual tree.  Otherwise they're still visible to things like Arrange, keyboard navigation, etc.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InitializeArrangeState(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeState)">
            <summary>
                Helper method to initialize the arrange state
            </summary>
            <param name="arrangeState"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.FinishArrange(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeState)">
            <summary>
                Helper method which which ends the arrange by setting values
                from arrange state to appropriate fields.
            </summary>
            <param name="arrangeState"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange
                
                Iterates over the columns in the display index order and looks if
                it the corresponding child is realized. If yes then arranges it.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeChild(System.Windows.UIElement,System.Int32,ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeState)">
            <summary>
                Method which arranges the give child
                based on given arrange state.
                
                Determines the start position of the child
                based on its display index, frozen count of 
                datagrid, current horizontal offset etc.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetRealizedBlockForColumn(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock},System.Int32)">
            <summary>
                Method which gets the realized block for a given index
            </summary>
            <param name="blockList"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetRealizedChildrenNotInBlockList(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock},System.Collections.IList)">
            <summary>
                Determines the list of children which are realized, but
                shouldnt be as per the state stored at rows presenter
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
                This method is invoked when the IsItemsHost property changes.
            </summary>
            <param name="oldIsItemsHost">The old value of the IsItemsHost property.</param>
            <param name="newIsItemsHost">The new value of the IsItemsHost property.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetColumnEstimatedMeasureWidth(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Helper method which estimates the width of the column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetColumnEstimatedMeasureWidthSum(System.Int32,System.Int32,System.Double)">
            <summary>
                Helper method which estimates the sum of widths of
                a given block of columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.EnsureRealizedChildren">
            <summary>
                Helper method which ensures that the _realizedChildren
                member is properly initialized
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ComputeCellsPanelHorizontalOffset">
            <summary>
                Helper method to compute the cells panel horizontal offset
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetViewportWidth">
            <summary>
                Helper method which returns the viewport width
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
                Called when the Items collection associated with the containing ItemsControl changes.
            </summary>
            <param name="sender">sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.OnClearChildren">
            <summary>
                Sets the _realizedChildren in sync when children are cleared
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InternalBringIndexIntoView(System.Int32)">
            <summary>
                A workaround method to access BringIndexIntoView method in this assembly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.BringIndexIntoView(System.Int32)">
            <summary>
                Determines the position of the child and sets the horizontal
                offset appropriately.
            </summary>
            <param name="index">Specify the item index that should become visible</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if index is out of range
            </exception>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.IsChildInView(System.Int32,System.Double@)">
            <summary>
                Method which determines if the child at given index is already in view.
                Also returns the appropriate estimated horizontal offset to bring the
                child into view if it is not already in view.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.GetFrozenClipForChild(System.Windows.UIElement)">
            <summary>
            Method which returns the clip for the child which overlaps with frozen column
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ParentRowsPresenter">
            <summary>
                The property which returns DataGridRowsPresenter ancestor of this panel
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.IsVirtualizing">
            <summary>
                Property which determines if one has to virtualize the cells
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.InRecyclingMode">
            <summary>
                Property which determines if one is in recycling mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.RealizedChildren">
            <summary>
                Returns the list of childen that have been realized by the Generator.  
                We must use this method whenever we interact with the Generator's index.  
                In recycling mode the Children collection also contains recycled containers and thus does 
                not map to the Generator's list.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.Columns">
            <summary>
                Returns the columns on the parent DataGrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ParentDataGrid">
            <summary>
                The row that this panel presents belongs to the DataGrid returned from this property.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCellsPanel.ArrangeState">
            <summary>
                Private class used to maintain state between arrange 
                of multiple children.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn">
            <summary>
                A column that displays a check box.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for boolean based cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for boolean based cells.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.IsThreeStateProperty">
            <summary>
                The DependencyProperty for the IsThreeState property.
                Flags:              None
                Default Value:      false
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
                Called when a cell has just switched to edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="editingEventArgs">The event args of the input event that caused the cell to go into edit mode. May be null.</param>
            <returns>The unedited value of the cell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.CommitCellEdit(System.Windows.FrameworkElement)">
            <summary>
                Called when a cell's value is to be committed, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
                Called when a cell's value is to be cancelled, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="uneditedValue">UneditedValue</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.DefaultElementStyle">
            <summary>
                The default value of the ElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.DefaultEditingElementStyle">
            <summary>
                The default value of the EditingElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridCheckBoxColumn.IsThreeState">
            <summary>
                The IsThreeState property determines whether the control supports two or three states.
                IsChecked property can be set to null as a third state when IsThreeState is true
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent">
            <summary>
            This structure encapsulate the cell information necessary when clipboard content is prepared
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.#ctor(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Object)">
            <summary>
            Creates a new DataGridClipboardCellValue structure containing information about DataGrid cell
            </summary>
            <param name="row">DataGrid row item containing the cell</param>
            <param name="column">DataGridColumn containing the cell</param>
            <param name="value">DataGrid cell value</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.Equals(System.Object)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals 
            </summary>
            <param name="data"/>
            <returns>True iff this and data are equal</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.GetHashCode">
            <summary>
            Return a deterministic hash code
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.op_Equality(ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent,ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals 
            </summary>
            <param name="clipboardCellContent1"/>
            <param name="clipboardCellContent2"/>
            <returns>True iff clipboardCellContent1 and clipboardCellContent2 are equal</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.op_Inequality(ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent,ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent)">
            <summary>
            Field-by-field comparison to avoid reflection-based ValueType.Equals 
            </summary>
            <param name="clipboardCellContent1"/>
            <param name="clipboardCellContent2"/>
            <returns>True iff clipboardCellContent1 and clipboardCellContent2 are NOT equal</returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.Item">
            <summary>
            DataGrid row item containing the cell
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.Column">
            <summary>
            DataGridColumn containing the cell
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCellContent.Content">
            <summary>
            Cell content
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCopyMode">
            <summary>
            Defines modes that indicate how DataGrid content is copied to the Clipboard. 
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCopyMode.None">
            <summary>
            Copying to the Clipboard is disabled.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCopyMode.ExcludeHeader">
            <summary>
            The text values of selected cells can be copied to the Clipboard. Column header is not included. 
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridClipboardCopyMode.IncludeHeader">
            <summary>
            The text values of selected cells can be copied to the Clipboard. Column header is included for columns that contain selected cells.  
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection">
            <summary>
                Internal class that holds the DataGrid's column collection.  Handles error-checking columns as they come in.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ClearItems">
            <summary>
                Clear's all the columns from this collection and resets DisplayIndex to its default value.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ColumnFromDisplayIndex(System.Int32)">
            <summary>
                Returns the DataGridColumn with the given DisplayIndex
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.CoerceDefaultDisplayIndex(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32)">
            <summary>
                This takes a column and checks that if its DisplayIndex is the default value.  If so, it coerces
                the DisplayIndex to be its location in the columns collection.
                We can't do this in CoerceValue because the callback isn't called for default values.  Instead we call this
                whenever a column is added or replaced in the collection or when the DisplayIndex of an existing column has changed.
            </summary>
            <param name="column">The column</param>
            <param name="newDisplayIndex">The DisplayIndex the column should have</param>
            <returns>The DisplayIndex of the column</returns>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.OnColumnDisplayIndexChanged(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.UpdateDisplayIndexForChangedColumn(System.Int32,System.Int32)">
            <summary>
                Called when the DisplayIndex for a single column has changed.  The other columns may have conflicting display indices, so
                we walk through them and adjust.  This method does nothing if we're already updating display index as part of a larger
                operation (such as add or remove).  This is both for re-entrancy and to avoid modifying the display index map as we walk over
                the columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.UpdateDisplayIndexForNewColumns(System.Collections.IList,System.Int32)">
            <summary>
                Sets the DisplayIndex on all newly inserted or added columns and updates the existing columns as necessary.  
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.UpdateDisplayIndexForRemovedColumns(System.Collections.IList,System.Int32)">
            <summary>
                Updates the display index for all columns affected by the removal of a set of columns.  
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.UpdateDisplayIndexForReplacedColumn(System.Collections.IList,System.Collections.IList)">
            <summary>
                Updates the display index for the column that was just replaced and adjusts the other columns if necessary
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ClearDisplayIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
                Clears the DisplayIndexProperty on each of the columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.IsDisplayIndexValid(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32,System.Boolean)">
            <summary>
                Returns true if the display index is valid for the given column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InsertInDisplayIndexMap(System.Int32,System.Int32)">
            <summary>
                Inserts the given columnIndex in the DisplayIndexMap at the given display index.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RemoveFromDisplayIndexMap(System.Int32)">
            <summary>
                Removes the given column index from the DisplayIndexMap
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ValidateDisplayIndex(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32)">
            <summary>
                Throws an ArgumentOutOfRangeException if the given displayIndex is invalid for the given column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ValidateDisplayIndex(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32,System.Boolean)">
            <summary>
                Throws an ArgumentOutOfRangeException if the given displayIndex is invalid for the given column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.OnDataGridFrozenColumnCountChanged(System.Int32,System.Int32)">
            <summary>
                Method which sets / resets the IsFrozen property of columns based on DataGrid's FrozenColumnCount.
                It is possible that the FrozenColumnCount change could be a result of column count itself, in
                which case only the columns which are in the collection at the moment are to be considered.
            </summary>
            <param name="oldFrozenCount"></param>
            <param name="newFrozenCount"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.HasVisibleStarColumnsInternal(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double@)">
            <summary>
                Method which determines if there are any
                star columns in datagrid except the given column and also returns perStarWidth
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.HasVisibleStarColumnsInternal(System.Double@)">
            <summary>
                Method which determines if there are any
                star columns in datagrid and also returns perStarWidth
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.HasVisibleStarColumnsInternal(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
                Method which determines if there are any
                star columns in datagrid except the given column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InvalidateHasVisibleStarColumns">
            <summary>
                Method which redetermines if the collection has any star columns are not.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeStarColumnWidths">
            <summary>
                Method which redistributes the width of star columns among them selves
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ComputeStarColumnWidths(System.Double)">
            <summary>
                Helper method which computes the widths of all the star columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.OnCellsPanelHorizontalOffsetChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Method which handles the column widths computation for CellsPanelHorizontalOffset change
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InvalidateAverageColumnWidth">
            <summary>
                Helper method to invalidate the average width computation
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ComputeAverageColumnWidth">
            <summary>
                Helper method which determines the average with of all the columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InvalidateColumnWidthsComputation">
            <summary>
                Helper method to invalidate the column width computation
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ComputeColumnWidths(System.Object)">
            <summary>
                Helper method which computes the widths of the columns. Used as a callback
                to dispatcher operation
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ComputeColumnWidths">
            <summary>
                Method which computes the widths of the columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InitializeColumnDisplayValues">
            <summary>
                Method which initializes the column width's diplay value to its desired value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RedistributeColumnWidthsOnMinWidthChangeOfColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which redistributes the column widths based on change in MinWidth of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RedistributeColumnWidthsOnMaxWidthChangeOfColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which redistributes the column widths based on change in MaxWidth of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RedistributeColumnWidthsOnWidthChangeOfColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
                Method which redistributes the column widths based on change in Width of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RedistributeColumnWidthsOnAvailableSpaceChange(System.Double,System.Double)">
            <summary>
                Method which redistributes the column widths based on change in available space of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ExpandAllColumnWidthsToDesiredValue">
            <summary>
                Method which expands the display values of widths of all columns to
                their desired values. Usually used when the last star column's width
                is changed to non-star
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RedistributeColumnWidthsOnNonStarWidthChange(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
                Method which redistributes widths of columns on change of a column's width
                when datagrid itself has star columns, but neither the oldwidth or the newwidth
                of changed column is star.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.DistributeSpaceAmongColumns(System.Double)">
            <summary>
                Method which distributes a given amount of width among all the columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.DistributeSpaceAmongNonStarColumns(System.Double)">
            <summary>
                Helper method which distributes a given amount of width among all non star columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.OnColumnResizeStarted">
            <summary>
                Method which is called when user resize of column starts
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.OnColumnResizeCompleted(System.Boolean)">
            <summary>
                Method which is called when user resize of column ends
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeColumnWidthsOnColumnResize(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double,System.Boolean)">
            <summary>
                Method which recomputes the widths of columns on resize of column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeColumnWidthsOnColumnPositiveResize(System.Double,System.Int32,System.Boolean)">
            <summary>
                Method which computes widths of columns on positive resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeStarColumnWidthsOnColumnPositiveResize(System.Double,System.Int32,System.Double,System.Boolean)">
            <summary>
                Method which resizes the widths of star columns on positive resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GetStarFactorsForPositiveResize(System.Int32,System.Double@)">
            <summary>
                Method which returns the total of star factors of the columns which could be resized on positive resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ReallocateStarValuesForPositiveResize(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
                Method which reallocated the star factors of star columns on 
                positive resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeNonStarColumnWidthsOnColumnPositiveResize(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Method which recomputes widths of non star columns on positive resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeColumnWidthsOnColumnNegativeResize(System.Double,System.Int32,System.Boolean)">
            <summary>
                Method which recomputes the widths of columns on negative resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeNonStarColumnWidthsOnColumnNegativeResize(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Method which recomputes widths of non star columns on negative resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RecomputeStarColumnWidthsOnColumnNegativeResize(System.Double,System.Int32,System.Double,System.Boolean)">
            <summary>
                Method which recomputes widths on star columns on negative resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GetStarFactorsForNegativeResize(System.Int32,System.Double@)">
            <summary>
                Method which returns the total star factors of columns which resize of negative resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ReallocateStarValuesForNegativeResize(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
                Method which reallocates star factors of columns on negative resize of a column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.SetResizedColumnWidth(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double,System.Boolean)">
            <summary>
                Helper method which sets the width of the column which is currently getting resized
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GiveAwayWidthToColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which tries to give away the given amount of width 
                among all the columns except the ignored column
            </summary>
            <param name="ignoredColumn">The column which is giving away the width</param>
            <param name="giveAwayWidth">The amount of giveaway width</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GiveAwayWidthToColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double,System.Boolean)">
            <summary>
                Method which tries to give away the given amount of width 
                among all the columns except the ignored column
            </summary>
            <param name="ignoredColumn">The column which is giving away the width</param>
            <param name="giveAwayWidth">The amount of giveaway width</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GiveAwayWidthToNonStarColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which tries to give away the given amount of width
                among all non star columns except the ignored column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.FindMinimumLaggingWidthOfNonStarColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32@)">
            <summary>
                Helper method which finds the minimum non-zero difference between displayvalue and desiredvalue
                among all non star columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GiveAwayWidthToEveryNonStarColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Helper method which gives away the given amount of width to
                every non star column whose display value is less than its desired value
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.GiveAwayWidthToScrollViewerExcess(System.Double,System.Boolean)">
            <summary>
                Helper method which gives away width to scroll viewer
                if its extent width is greater than viewport width
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayUnusedSpaceOnColumnPositiveResize(System.Double,System.Int32,System.Boolean)">
            <summary>
                Method which tries to get the unused column space when another column tries to positive resize
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromUnusedSpace(System.Boolean,System.Double,System.Double)">
            <summary>
                Helper method which tries to take away width from unused space
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromUnusedSpace(System.Boolean,System.Double)">
            <summary>
                Helper method which tries to take away width from unused space
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double,System.Boolean)">
            <summary>
                Method which tries to take away the given amount of width from columns
                except the ignored column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double,System.Boolean,System.Double)">
            <summary>
                Method which tries to take away the given amount of width from columns
                except the ignored column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromStarColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which tries to take away the given amount of width form
                the star columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromNonStarColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Method which tries to take away the given amount of width
                among all non star columns except the ignored column
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.FindMinimumExcessWidthOfNonStarColumns(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Int32@)">
            <summary>
                Helper method which finds the minimum non-zero difference between displayvalue and minwidth
                among all non star columns
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.TakeAwayWidthFromEveryNonStarColumn(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Helper method which takes away the given amount of width from
                every non star column whose display value is greater than its minwidth
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.InvalidateColumnRealization(System.Boolean)">
            <summary>
                Called when properties which affect the realized columns namely
                Column Width, FrozenColumnCount, DisplayIndex etc. are changed.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.DisplayIndexMap">
            <summary>
                A map of display index (key) to index in the column collection (value).  Used to quickly find a column from its display index.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.IsUpdatingDisplayIndex">
            <summary>
                Used to guard against re-entrancy when changing the DisplayIndex of a column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.HasVisibleStarColumns">
            <summary>
                Property which determines if there are any star columns
                in the datagrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.AverageColumnWidth">
            <summary>
                Property holding the average widht of columns
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.ColumnWidthsComputationPending">
            <summary>
                Property indicating whether the column width computation opertaion is pending
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RebuildRealizedColumnsBlockListForNonVirtualizedRows">
            <summary>
                Property which indicates that the RealizedColumnsBlockList
                is dirty and needs to be rebuilt for non-column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RealizedColumnsBlockListForNonVirtualizedRows">
            <summary>
                List of realized column index blocks for non-column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RealizedColumnsDisplayIndexBlockListForNonVirtualizedRows">
            <summary>
                List of realized column display index blocks for non-column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RebuildRealizedColumnsBlockListForVirtualizedRows">
            <summary>
                Property which indicates that the RealizedColumnsBlockList
                is dirty and needs to be rebuilt for column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RealizedColumnsBlockListForVirtualizedRows">
            <summary>
                List of realized column index blocks for column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RealizedColumnsDisplayIndexBlockListForVirtualizedRows">
            <summary>
                List of realized column display index blocks for column virtualized rows
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.FirstVisibleDisplayIndex">
            <summary>
                Helper property to return the display index of first visible column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.LastVisibleDisplayIndex">
            <summary>
                Helper property to return the display index of last visible column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnCollection.RefreshAutoWidthColumns">
            <summary>
                Flag set when an operation has invalidated auto-width columns so they are no longer expected to be their desired width.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnDropSeparator">
            <summary>
            The separator used to indicate drop location during column header drag-drop
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnEventArgs">
            <summary>
                EventArgs used for events related to DataGridColumn.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnEventArgs.Column">
            <summary>
                DataGridColumn that the DataGridColumnEventArgs refers to
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnFloatingHeader">
            <summary>
            The control which would be used to indicate the drag during column header drag-drop
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnReorderingEventArgs">
            <summary>
            Event args used for Column reordering event raised after column header drag-drop
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnReorderingEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            Constructor
            </summary>
            <param name="dataGridColumn"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnReorderingEventArgs.Cancel">
            <summary>
            Property to specify whether the Reordering operation should be cancelled
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator">
            <summary>
            The control which would be used as an indicator for drop location during column header drag drop
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridColumnReorderingEventArgs.DragIndicator">
            <summary>
            The control which would be used as a drag indicator during column header drag drop.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn">
            <summary>
                A column that displays a drop-down list while in edit mode.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.OnSelectedValueBindingChanged(System.Windows.Data.BindingBase,System.Windows.Data.BindingBase)">
            <summary>
                Called when SelectedValueBinding changes.
            </summary>
            <param name="oldBinding">The old binding.</param>
            <param name="newBinding">The new binding.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.OnSelectedItemBindingChanged(System.Windows.Data.BindingBase,System.Windows.Data.BindingBase)">
            <summary>
                Called when SelectedItemBinding changes.
            </summary>
            <param name="oldBinding">The old binding.</param>
            <param name="newBinding">The new binding.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.OnTextBindingChanged(System.Windows.Data.BindingBase,System.Windows.Data.BindingBase)">
            <summary>
                Called when TextBinding changes.
            </summary>
            <param name="oldBinding">The old binding.</param>
            <param name="newBinding">The new binding.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ElementStyleProperty">
            <summary>
                The DependencyProperty for the ElementStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.EditingElementStyleProperty">
            <summary>
                The DependencyProperty for the EditingElementStyle property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ApplyStyle(System.Boolean,System.Boolean,System.Windows.FrameworkElement)">
            <summary>
                Assigns the ElementStyle to the desired property on the given element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ApplyStyle(System.Boolean,System.Boolean,System.Windows.FrameworkContentElement)">
            <summary>
                Assigns the ElementStyle to the desired property on the given element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ApplyBinding(System.Windows.Data.BindingBase,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
                Assigns the Binding to the desired property on the target object.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ItemsSourceProperty">
            <summary>
                The DependencyProperty for ItemsSource.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.DisplayMemberPathProperty">
            <summary>
                The DependencyProperty for the DisplayMemberPath property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.SelectedValuePathProperty">
            <summary>
                SelectedValuePath DependencyProperty
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.GetComboBoxSelectionValue(System.Windows.Controls.ComboBox)">
            <summary>
            Helper method which returns selection value from
            combobox based on which Binding's were set.
            </summary>
            <param name="comboBox"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for text based cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for text based cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
                Called when a cell has just switched to edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="editingEventArgs">The event args of the input event that caused the cell to go into edit mode. May be null.</param>
            <returns>The unedited value of the cell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.CommitCellEdit(System.Windows.FrameworkElement)">
            <summary>
                Called when a cell's value is to be committed, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
                Called when a cell's value is to be cancelled, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="uneditedValue">UneditedValue</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.EffectiveBinding">
            <summary>
                Chooses either SelectedItemBinding, TextBinding, SelectedValueBinding or  based which are set.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.SelectedValueBinding">
            <summary>
                The binding that will be applied to the SelectedValue property of the ComboBox.  This works in conjunction with SelectedValuePath  
            </summary>
            <remarks>
                This isn't a DP because if it were getting the value would evaluate the binding.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.SelectedItemBinding">
            <summary>
                The binding that will be applied to the SelectedItem property of the ComboBoxValue.
            </summary>
            <remarks>
                This isn't a DP because if it were getting the value would evaluate the binding.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.TextBinding">
            <summary>
                The binding that will be applied to the Text property of the ComboBoxValue.
            </summary>
            <remarks>
                This isn't a DP because if it were getting the value would evaluate the binding.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.DefaultElementStyle">
            <summary>
                The default value of the ElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.DefaultEditingElementStyle">
            <summary>
                The default value of the EditingElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ElementStyle">
            <summary>
                A style that is applied to the generated element when not editing.
                The TargetType of the style depends on the derived column class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.EditingElementStyle">
            <summary>
                A style that is applied to the generated element when editing.
                The TargetType of the style depends on the derived column class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ClipboardContentBinding">
            <summary>
            If base ClipboardContentBinding is not set we use Binding.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.ItemsSource">
            <summary>
                The ComboBox will attach to this ItemsSource.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.DisplayMemberPath">
            <summary>
                DisplayMemberPath is a simple way to define a default template
                that describes how to convert Items into UI elements by using
                the specified path.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.SelectedValuePath">
            <summary>
             The path used to retrieve the SelectedValue from the SelectedItem
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridComboBoxColumn.TextBlockComboBox.OnDataContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for DataContext property
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditAction">
            <summary>
                Used to specify action to take out of edit mode.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditAction.Cancel">
            <summary>
                Cancel the changes.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditAction.Commit">
            <summary>
                Commit edited value.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditingUnit">
            <summary>
                Used to specify which container to take out of edit mode.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditingUnit.Cell">
            <summary>
                Targets a cell container.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridEditingUnit.Row">
            <summary>
                Targets a row container.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridGridLinesVisibility">
            <summary>
                Defines the visibility modes for DataGrid grid lines.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder">
            <summary>
                A Border used to provide the default look of headers.
                When Background or BorderBrush are set, the rendering will
                revert back to the default Border implementation.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsHoveredProperty">
            <summary>
                DependencyProperty for IsHovered.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsPressedProperty">
            <summary>
                DependencyProperty for IsPressed.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsClickableProperty">
            <summary>
                DependencyProperty for IsClickable.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SortDirectionProperty">
            <summary>
                DependencyProperty for SortDirection.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsSelectedProperty">
            <summary>
                DependencyProperty for IsSelected.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.OrientationProperty">
            <summary>
                DependencyProperty for Orientation.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SeparatorBrushProperty">
            <summary>
                DependencyProperty for SeparatorBrush.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SeparatorVisibilityProperty">
            <summary>
                DependencyProperty for SeperatorBrush.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.OnThemeChange(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Called when the theme changes.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.MeasureOverride(System.Windows.Size)">
            <summary>
                Calculates the desired size of the element given the constraint.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.ArrangeOverride(System.Windows.Size)">
            <summary>
                Positions children and returns the final size of the element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                Called when this element should re-render.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.EnsureCache(System.Int32)">
            <summary>
                Creates a cache of frozen Freezable resources for use 
                across all instances of the border.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.ReleaseCache">
            <summary>
                Releases all resources in the cache.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.GetCachedFreezable(System.Int32)">
            <summary>
                Retrieves a cached resource.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.CacheFreezable(System.Windows.Freezable,System.Int32)">
            <summary>
                Caches a resources.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsHovered">
            <summary>
                Whether the hover look should be applied.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsPressed">
            <summary>
                Whether the pressed look should be applied.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsClickable">
            <summary>
                When false, will not apply the hover look even when IsHovered is true.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SortDirection">
            <summary>
                Whether to appear sorted.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.IsSelected">
            <summary>
                Whether to appear selected.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.Orientation">
            <summary>
                Vertical = column header
                Horizontal = row header
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.UsingBorderImplementation">
            <summary>
                When there is a Background or BorderBrush, revert to the Border implementation.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SeparatorBrush">
            <summary>
                Property that indicates the brush to use when drawing seperators between headers.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.SeparatorVisibility">
            <summary>
                Property that indicates the Visibility for the header seperators.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.Theme">
            <summary>
                The name of the current theme.
                Accessing this property finishes hooking up
                the theme change notification.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeaderBorder.DefaultPadding">
            <summary>
                Returns a default padding for the various themes for use
                by measure and arrange.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibility.All">
            <summary>
            Show Row, Column, and Corner Headers
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibility.Column">
            <summary>
            Show only Column Headers with top-right corner Header
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibility.Row">
            <summary>
            Show only Row Headers with bottom-left corner
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibility.None">
            <summary>
            Don抰 show any Headers
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibilityToVisibilityConverter">
            <summary>
                Converts DataGridHeadersVisibility to Visibility based on the given parameter.
            </summary> 
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibilityToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibilityToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Not implemented
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper">
            <summary>
                Helper code for DataGrid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.SubtractFromSize(System.Windows.Size,System.Double,System.Boolean)">
            <summary>
                Returns a size based on the given one with the given double subtracted out from the Width or Height.
                Used to adjust for the thickness of grid lines.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.IsGridLineVisible(ExtendedGrid.Microsoft.Windows.Controls.DataGrid,System.Boolean)">
            <summary>
                Test if either the vertical or horizontal gridlines are visible.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.FindParent``1(System.Windows.FrameworkElement)">
            <summary>
                Walks up the templated parent tree looking for a parent type.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.TreeHasFocusAndTabStop(System.Windows.DependencyObject)">
            <summary>
                Helper method which determines if any of the elements of
                the tree is focusable and has tab stop
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.OnColumnWidthChanged(ExtendedGrid.Microsoft.Windows.Controls.IProvideDataGridColumn,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Invalidates a cell's panel if its column's width changes sufficiently. 
            </summary>
            <param name="cell">The cell or header.</param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.GetFrozenClipForCell(ExtendedGrid.Microsoft.Windows.Controls.IProvideDataGridColumn)">
            <summary>
                Helper method which returns the clip for the cell based on whether it overlaps with frozen columns or not
            </summary>
            <param name="cell">The cell or header.</param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.GetParentPanelForCell(ExtendedGrid.Microsoft.Windows.Controls.IProvideDataGridColumn)">
            <summary>
                Helper method which returns the parent DataGridCellsPanel for a cell
            </summary>
            <param name="cell">The cell or header.</param>
            <returns>Parent panel of the given cell or header</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.GetParentCellsPanelHorizontalOffset(ExtendedGrid.Microsoft.Windows.Controls.IProvideDataGridColumn)">
            <summary>
                Helper method which returns the parent DataGridCellPanel's offset from the scroll viewer
                for a cell or Header
            </summary>
            <param name="cell">The cell or header.</param>
            <returns>Parent Panel's offset with respect to scroll viewer</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.GetCoercedTransferPropertyValue(System.Windows.DependencyObject,System.Object,System.Windows.DependencyProperty,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
                Computes the value of a given property based on the DataGrid property transfer rules.
            </summary>
            <remarks>
                This is intended to be called from within the coercion of the baseProperty.
            </remarks>
            <param name="baseObject">The target object which recieves the transferred property</param>
            <param name="baseValue">The baseValue that was passed into the coercion delegate</param>
            <param name="baseProperty">The property that is being coerced</param>
            <param name="parentObject">The object that contains the parentProperty</param>
            <param name="parentProperty">A property who's value should be transfered (via coercion) to the baseObject if it has a higher precedence.</param>
            <param name="grandParentObject">Same as parentObject but evaluated at a lower presedece for a given BaseValueSource</param>
            <param name="grandParentProperty">Same as parentProperty but evaluated at a lower presedece for a given BaseValueSource</param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.TransferProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
                Causes the given DependencyProperty to be coerced in transfer mode.
            </summary>
            <remarks>
                This should be called from within the target object's NotifyPropertyChanged.  It MUST be called in
                response to a change in the target property.
            </remarks>
            <param name="d">The DependencyObject which contains the property that needs to be transfered.</param>
            <param name="p">The DependencyProperty that is the target of the property transfer.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper._propertyTransferEnabledMap">
            <summary>
                Tracks which properties are currently being transfered.  This information is needed when GetPropertyTransferEnabledMapForObject
                is called inside of Coersion.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.GetTheme(System.Windows.FrameworkElement)">
            <summary>
                Will return the string version of the current theme name.
                Will apply a resource reference to the element passed in.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.ThemeProperty">
            <summary>
                Private property used to determine the theme name.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper._themeKey">
            <summary>
                The resource key used to fetch the theme name.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.HookThemeChange(System.Type,System.Windows.PropertyChangedCallback)">
            <summary>
                Sets up a property change handler for the private theme property.
                Use this to receive a theme change notification.
                Requires calling GetTheme on an element of the given type at some point.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.IsOneWay(System.Windows.Data.BindingBase)">
            <summary>
                Returns true if the binding (or any part of it) is OneWay.
            </summary>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.EnsureTwoWayIfNotOneWay(System.Windows.Data.BindingBase)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.AreRowHeadersVisible(ExtendedGrid.Microsoft.Windows.Controls.DataGridHeadersVisibility)">
            <summary>
                Method which takes in DataGridHeadersVisibility parameter
                and determines if row headers are visible.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.CoerceToMinMax(System.Double,System.Double,System.Double)">
            <summary>
                Helper method which coerces a value such that it satisfies min and max restrictions
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHelper.HasNonEscapeCharacters(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
                Helper to check if TextCompositionEventArgs.Text has any non
                escape characters.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn">
            <summary>
                A column that displays a hyperlink.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.TargetNameProperty">
            <summary>
            Dependecy property for TargetName Property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.OnContentBindingChanged(System.Windows.Data.BindingBase,System.Windows.Data.BindingBase)">
            <summary>
                Called when ContentBinding changes.
            </summary>
            <remarks>
                Default implementation notifies the DataGrid and its subtree about the change.
            </remarks>
            <param name="oldBinding">The old binding.</param>
            <param name="newBinding">The new binding.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.ApplyContentBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Try applying ContentBinding. If it doesnt work out apply Binding.
            </summary>
            <param name="target"></param>
            <param name="property"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Override which rebuilds the cell's visual tree for ContentBinding change
            and Modifies Hyperlink for TargetName change
            </summary>
            <param name="element"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
                Called when a cell has just switched to edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="editingEventArgs">The event args of the input event that caused the cell to go into edit mode. May be null.</param>
            <returns>The unedited value of the cell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.CommitCellEdit(System.Windows.FrameworkElement)">
            <summary>
                Called when a cell's value is to be committed, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
                Called when a cell's value is to be cancelled, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.TargetName">
            <summary>
            The property which determines the target name of the hyperlink
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.ContentBinding">
            <summary>
            The binding to the content to be display under hyperlink
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.DefaultElementStyle">
            <summary>
                The default value of the ElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridHyperlinkColumn.DefaultEditingElementStyle">
            <summary>
                The default value of the EditingElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridItemAttachedStorage">
            <summary>
                Holds all of the information that we need to attach to row items so that we can restore rows when they're devirtualized.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridItemAttachedStorage._itemStorageMap">
            <summary>
                A map between row items and the associated data.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength">
            <summary>
                DataGridLength is the type used for various length properties in DataGrid
                that support a variety of descriptive sizing modes in addition to numerical
                values.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.#ctor(System.Double)">
            <summary>
                Initializes as an absolute value in pixels.
            </summary>
            <param name="pixels">
                Specifies the number of 'device-independent pixels' (96 pixels-per-inch).
            </param>
            <exception cref="T:System.ArgumentException">
                If <c>pixels</c> parameter is <c>double.NaN</c>
                or <c>pixels</c> parameter is <c>double.NegativeInfinity</c>
                or <c>pixels</c> parameter is <c>double.PositiveInfinity</c>.
            </exception>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.#ctor(System.Double,ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType)">
            <summary>
                Initializes to a specified value and unit.
            </summary>
            <param name="value">The value to hold.</param>
            <param name="type">The unit of <c>value</c>.</param>
            <remarks> 
                <c>value</c> is ignored unless <c>type</c> is
                <c>DataGridLengthUnitType.Pixel</c> or
                <c>DataGridLengthUnitType.Star</c>
            </remarks>
            <exception cref="T:System.ArgumentException">
                If <c>value</c> parameter is <c>double.NaN</c>
                or <c>value</c> parameter is <c>double.NegativeInfinity</c>
                or <c>value</c> parameter is <c>double.PositiveInfinity</c>.
            </exception>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.#ctor(System.Double,ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType,System.Double,System.Double)">
            <summary>
                Initializes to a specified value and unit.
            </summary>
            <param name="value">The value to hold.</param>
            <param name="type">The unit of <c>value</c>.</param>
            <param name="desiredValue"></param>
            <param name="displayValue"></param>
            <remarks> 
                <c>value</c> is ignored unless <c>type</c> is
                <c>DataGridLengthUnitType.Pixel</c> or
                <c>DataGridLengthUnitType.Star</c>
            </remarks>
            <exception cref="T:System.ArgumentException">
                If <c>value</c> parameter is <c>double.NaN</c>
                or <c>value</c> parameter is <c>double.NegativeInfinity</c>
                or <c>value</c> parameter is <c>double.PositiveInfinity</c>.
            </exception>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.op_Equality(ExtendedGrid.Microsoft.Windows.Controls.DataGridLength,ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 DataGridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLengths have same value 
            and unit type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.op_Inequality(ExtendedGrid.Microsoft.Windows.Controls.DataGridLength,ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 DataGridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLengths have either different value or 
            unit type.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.Equals(System.Object)">
            <summary>
            Compares this instance of DataGridLength with another object.
            </summary>
            <param name="obj">Reference to an object for comparison.</param>
            <returns><c>true</c>if this DataGridLength instance has the same value 
            and unit type as oCompare.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.Equals(ExtendedGrid.Microsoft.Windows.Controls.DataGridLength)">
            <summary>
            Compares this instance of DataGridLength with another instance.
            </summary>
            <param name="other">Grid length instance to compare.</param>
            <returns><c>true</c>if this DataGridLength instance has the same value 
            and unit type as gridLength.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns><see cref="M:System.Object.GetHashCode"/></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.ToString">
            <summary>
                Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.op_Implicit(System.Double)~ExtendedGrid.Microsoft.Windows.Controls.DataGridLength">
            <summary>
                Allows for values of type double to be implicitly converted
                to DataGridLength.
            </summary>
            <param name="doubleValue">The number of pixels to represent.</param>
            <returns>The DataGridLength representing the requested number of pixels.</returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.IsAbsolute">
            <summary>
                Returns <c>true</c> if this DataGridLength instance holds 
                an absolute (pixel) value.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.IsAuto">
            <summary>
                Returns <c>true</c> if this DataGridLength instance is 
                automatic (not specified).
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.IsStar">
            <summary>
                Returns <c>true</c> if this DataGridLength instance holds a weighted proportion
                of available space.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.IsSizeToCells">
            <summary>
                Returns <c>true</c> if this instance is to size to the cells of a column or row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.IsSizeToHeader">
            <summary>
                Returns <c>true</c> if this instance is to size to the header of a column or row.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.Value">
            <summary>
                Returns value part of this DataGridLength instance.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.UnitType">
            <summary>
                Returns unit type of this DataGridLength instance.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.DesiredValue">
            <summary>
                Returns the desired value of this instance.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.DisplayValue">
            <summary>
                Returns the display value of this instance.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.Auto">
            <summary>
                Returns a value initialized to mean "auto."
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.SizeToCells">
            <summary>
                Returns a value initialized to mean "size to cells."
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridLength.SizeToHeader">
            <summary>
                Returns a value initialized to mean "size to header."
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter">
            <summary>
                Converts instances of various types to and from DataGridLength.
            </summary> 
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Checks whether or not this class can convert from a given type.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Checks whether or not this class can convert to a given type.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                Attempts to convert to a DataGridLength from the given object.
            </summary>
            <param name="context">The ITypeDescriptorContext for this call.</param>
            <param name="culture">The CultureInfo which is respected when converting.</param>
            <param name="value">The object to convert to a DataGridLength.</param>
            <returns>The DataGridLength instance which was constructed.</returns>
            <exception cref="T:System.ArgumentNullException">
                An ArgumentNullException is thrown if the source is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                An ArgumentException is thrown if the source is not null 
                and is not a valid type which can be converted to a DataGridLength.
            </exception>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
                Attempts to convert a DataGridLength instance to the given type.
            </summary>
            <param name="context">The ITypeDescriptorContext for this call.</param>
            <param name="culture">The CultureInfo which is respected when converting.</param>
            <param name="value">The DataGridLength to convert.</param>
            <param name="destinationType">The type to which to convert the DataGridLength instance.</param>
            <returns>
                The object which was constructed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                An ArgumentNullException is thrown if the value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                An ArgumentException is thrown if the value is not null and is not a DataGridLength,
                or if the destinationType isn't one of the valid destination types.
            </exception>
            <SecurityNote>
                Critical: calls InstanceDescriptor ctor which LinkDemands
                PublicOK: can only make an InstanceDescriptor for DataGridLength, not an arbitrary class
            </SecurityNote> 
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.ConvertToString(ExtendedGrid.Microsoft.Windows.Controls.DataGridLength,System.Globalization.CultureInfo)">
            <summary>
                Converts a DataGridLength instance to a String given the CultureInfo.
            </summary>
            <param name="gl">DataGridLength instance to convert.</param>
            <param name="cultureInfo">The culture to use.</param>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthConverter.ConvertFromString(System.String,System.Globalization.CultureInfo)">
            <summary>
                Parses a DataGridLength from a string given the CultureInfo.
            </summary>
            <param name="s">String to parse from.</param>
            <param name="cultureInfo">Culture Info.</param>
            <returns>Newly created DataGridLength instance.</returns>
            <remarks>
            Formats: 
            "[value][unit]"
                [value] is a double
                [unit] is a string in DataGridLength._unitTypes connected to a DataGridLengthUnitType
            "[value]"
                As above, but the DataGridLengthUnitType is assumed to be DataGridLengthUnitType.Pixel
            "[unit]"
                As above, but the value is assumed to be 1.0
                This is only acceptable for a subset of DataGridLengthUnitType: Auto
            </remarks>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType">
            <summary>
                Used to indicate the type of value that DataGridLength is holding.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType.Auto">
            <summary>
                The value indicates that content should be calculated based on the 
                unconstrained sizes of all cells and header in a column.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType.Pixel">
            <summary>
                The value is expressed in pixels.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType.SizeToCells">
            <summary>
                The value indicates that content should be be calculated based on the
                unconstrained sizes of all cells in a column.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType.SizeToHeader">
            <summary>
                The value indicates that content should be calculated based on the
                unconstrained size of the column header.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridLengthUnitType.Star">
            <summary>
                The value is expressed as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs">
            <summary>
                Provides information about a cell that has just entered edit mode.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs,System.Windows.FrameworkElement)">
            <summary>
                Constructs a new instance of these event arguments.
            </summary>
            <param name="column">The column of the cell that just entered edit mode.</param>
            <param name="row">The row container that contains the cell container that just entered edit mode.</param>
            <param name="editingEventArgs">The event arguments, if any, that led to the cell being placed in edit mode.</param>
            <param name="cell">The cell container that just entered edit mode.</param>
            <param name="editingElement">The editing element within the cell container.</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs.Column">
            <summary>
                The column of the cell that just entered edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs.Row">
            <summary>
                The row container that contains the cell container that just entered edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingEventArgs">
            <summary>
                The event arguments, if any, that led to the cell being placed in edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingElement">
            <summary>
                The editing element within the cell container.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow">
            <summary>
                A control for displaying a row of the DataGrid.
                A row represents a data item in the DataGrid.
                A row displays a cell for each column of the DataGrid.
            
                The data item for the row is added n times to the row's Items collection, 
                where n is the number of columns in the DataGrid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.#cctor">
            <summary>
                Instantiates global information.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ItemProperty">
            <summary>
                The DependencyProperty for the Item property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnItemChanged(System.Object,System.Object)">
            <summary>
                Called when the value of the Item property changes.
            </summary>
            <param name="oldItem">The old value of Item.</param>
            <param name="newItem">The new value of Item.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ItemsPanelProperty">
            <summary>
                The DependencyProperty that represents the ItemsPanel property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)">
            <summary>
                Clears the CellsPresenter and DetailsPresenter references on Template change.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderProperty">
            <summary>
                The DependencyProperty for the Header property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnHeaderChanged(System.Object,System.Object)">
            <summary>
                Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">The old value of Header</param>
            <param name="newHeader">The new value of Header</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderStyleProperty">
            <summary>
                The DependencyProperty for the HeaderStyle property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderTemplateProperty">
            <summary>
                The DependencyProperty for the HeaderTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderTemplateSelectorProperty">
            <summary>
                The DependencyProperty for the HeaderTemplateSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ValidationErrorTemplateProperty">
            <summary>
                DependencyProperty for the ValidationErrorTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsTemplateProperty">
            <summary>
                The DependencyProperty for the DetailsTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsTemplateSelectorProperty">
            <summary>
                The DependencyProperty for the DetailsTemplateSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsVisibilityProperty">
            <summary>
                The DependencyProperty for the DetailsVisibility property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            We can't override the metadata for a read only property, so we'll get the property change notification for AlternationIndexProperty this way instead.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.PrepareRow(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Prepares a row container for active use.
            </summary>
            <remarks>
                Instantiates or updates a MultipleCopiesCollection ItemsSource in
                order that cells be generated.
            </remarks>
            <param name="item">The data item that the row represents.</param>
            <param name="owningDataGrid">The DataGrid owner.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ClearRow(ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Clears the row of references.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnColumnsChanged(System.Collections.ObjectModel.ObservableCollection{ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn},System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notification from the DataGrid that the columns collection has changed.
            </summary>
            <param name="columns">The columns collection.</param>
            <param name="e">The event arguments from the collection's change event.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnCoerceVisibility(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces Visibility so that the NewItemPlaceholder doesn't show up while you're entering a new Item
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DelayedRowDetailsVisibilityChanged(System.Object)">
            <summary>
                Notifies the DataGrid that the visibility is changed.  This is intended to be Invoked at lower than Layout priority to give the template time to expand.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.NotifyPropertyChanged(System.Windows.DependencyObject,System.String,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.SyncProperties(System.Boolean)">
            <summary>
                Fired when the Row is attached to the DataGrid.  The scenario here is if the user is scrolling and
                the Row is a recycled container that was just added back to the visual tree.  Properties that rely on a value from
                the Grid should be reevaluated because they may be stale.  
            </summary>
            <remarks>
                Properties can obviously be stale if the DataGrid's value changes while the row is disconnected.  They can also
                be stale for unobvious reasons.
            
                For example, the Style property is invalidated when we detect a new Visual parent.  This happens for 
                elements in the row (such as the RowHeader) before Prepare is called on the Row.  The coercion callback
                will thus be unable to find the DataGrid and will return the wrong value.  
            
                There is a potential for perf work here.  If we know a DP isn't invalidated when the visual tree is reconnected
                and we know that the Grid hasn't modified that property then its value is likely fine.  We could also cache whether
                or not the Grid's property is the one that's winning.  If not, no need to redo the coercion.  This notification 
                is pretty fast already and thus not worth the work for now.
            </remarks>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.AlternationIndexProperty">
            <summary>
                DependencyProperty for AlternationIndex.
            </summary>
            <remarks>
                Same as ItemsControl.AlternationIndexProperty.
            </remarks>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsSelectedProperty">
            <summary>
                The DependencyProperty for the IsSelected property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.SelectedEvent">
            <summary>
                Raised when the item's IsSelected property becomes true.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
                Called when IsSelected becomes true. Raises the Selected event.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.UnselectedEvent">
            <summary>
                Raised when the item's IsSelected property becomes false.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
                Called when IsSelected becomes false. Raises the Unselected event.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsEditingProperty">
            <summary>
                The DependencyProperty for IsEditing.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsCurrentProperty">
            <summary>
                The DependencyProperty for IsEditing.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ScrollCellIntoView(System.Int32)">
            <summary>
                Method which tries to scroll a cell for given index into the scroll view
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.GetIndex">
            <summary>
                Returns the index of this row within the DataGrid's list of item containers.
            </summary>
            <remarks>
                This method performs a linear search.
            </remarks>
            <returns>The index, if found, -1 otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.GetRowContainingElement(System.Windows.FrameworkElement)">
            <summary>
                Searchs up the visual parent chain from the given element until
                a DataGridRow element is found.
            </summary>
            <param name="element">The descendent of a DataGridRow.</param>
            <returns>
                The first ancestor DataGridRow of the element parameter.
                Returns null of none is found.
            </returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.TryGetCell(System.Int32)">
            <summary>
                Acceses the CellsPresenter and attempts to get the cell at the given index.
                This is not necessarily the display order.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.Item">
            <summary>
                The item that the row represents. This item is an entry in the list of items from the DataGrid.
                From this item, cells are generated for each column in the DataGrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ItemsPanel">
            <summary>
                A template that will generate the panel that arranges the cells in this row.
            </summary>
            <remarks>
                The template for the row should contain an ItemsControl that template binds to this property.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.Header">
            <summary>
                The object representing the Row Header.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderStyle">
            <summary>
                The object representing the Row Header style.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderTemplate">
            <summary>
                The object representing the Row Header template.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.HeaderTemplateSelector">
            <summary>
                The object representing the Row Header template selector.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.ValidationErrorTemplate">
            <summary>
            Template used to visually indicate an error in row Validation.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsTemplate">
            <summary>
                The object representing the Row Details template.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsTemplateSelector">
            <summary>
                The object representing the Row Details template selector.  
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsVisibility">
            <summary>
                The Visibility of the Details presenter
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.Tracker">
            <summary>
                Used by the DataGrid owner to send notifications to the row container.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.CellsPresenter">
            <summary>
                Set by the CellsPresenter when it is created.  Used by the Row to send down property change notifications.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsPresenter">
            <summary>
                Set by the DetailsPresenter when it is created.  Used by the Row to send down property change notifications.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.RowHeader">
            <summary>
                Set by the RowHeader when it is created.  Used by the Row to send down property change notifications.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.AlternationIndex">
            <summary>
                AlternationIndex is set on containers generated for an ItemsControl, when
                the ItemsControl's AlternationCount property is positive.  The AlternationIndex
                lies in the range [0, AlternationCount), and adjacent containers always get
                assigned different values.
            </summary>
            <remarks>
                Exposes ItemsControl.AlternationIndexProperty attached property as a direct property.
            </remarks>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsSelected">
            <summary>
                Indicates whether this DataGridRow is selected.
            </summary>
            <remarks>
                When IsSelected is set to true, an InvalidOperationException may be
                thrown if the value of the SelectionUnit property on the parent DataGrid 
                prevents selection or rows.
            </remarks>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.Selected">
            <summary>
                Raised when the item's IsSelected property becomes true.
            </summary>
        </member>
        <member name="E:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.Unselected">
            <summary>
                Raised when the item's IsSelected property becomes false.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsSelectable">
            <summary>
                Determines if a row can be selected, based on the DataGrid's SelectionUnit property.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsEditing">
            <summary>
                Whether the row is in editing mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.IsCurrent">
            <summary>
                Whether the row is in editing mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRow.DetailsPresenterDrawsGridLines">
            <summary>
            Returns true if the DetailsPresenter is supposed to draw gridlines for the row.  Only true
            if the DetailsPresenter hooked itself up properly to the Row.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs">
            <summary>
            This class encapsulates a selected row information necessary for CopyingRowClipboardContent event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.#ctor(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates DataGridRowClipboardEventArgs object initializing the properties.
            </summary>
            <param name="item"></param>
            <param name="startColumnDisplayIndex"></param>
            <param name="endColumnDisplayIndex"></param>
            <param name="isColumnHeadersRow"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.FormatClipboardCellValues(System.String)">
            <summary>
            This method serialize ClipboardRowContent list into string using the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.Item">
            <summary>
            DataGrid row item for which we prepare ClipboardRowContent
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.ClipboardRowContent">
            <summary>
            This list should be used to modify, add ot remove a cell content before it gets stored into the clipboard.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.StartColumnDisplayIndex">
            <summary>
            Represents the DisplayIndex of the first selected column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.EndColumnDisplayIndex">
            <summary>
            Represents the DisplayIndex of the last selected column
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.IsColumnHeadersRow">
            <summary>
            This property is true when the ClipboardRowContent represents column headers. In this case Item is null.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowClipboardEventArgs.RowIndexHint">
            <summary>
                If the row index was known at creation time, this will be non-negative.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs">
            <summary>
                Provides information just before a row exits edit mode.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGridRow,ExtendedGrid.Microsoft.Windows.Controls.DataGridEditAction)">
            <summary>
                Instantiates a new instance of this class.
            </summary>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editingUnit">The editing unit that is about to leave edit mode.</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs.Cancel">
            <summary>
                When true, prevents the row from exiting edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs.Row">
            <summary>
                The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridRowEditEndingEventArgs.EditAction">
            <summary>
                The edit action when leave edit mode.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionMode">
            <summary>
                The selection modes supported by DataGrid.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionMode.Single">
            <summary>
                Only one item can be selected at a time.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionMode.Extended">
            <summary>
                Multiple items can be selected, and the input gestures will default
                to the "extended" mode.
            </summary>
            <remarks>
                In Extended mode, selecting multiple items requires holding down 
                the SHIFT or CTRL keys to extend the selection from an anchor point.
            </remarks>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionUnit">
            <summary>
                The accepted selection units used in selection on a DataGrid.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionUnit.Cell">
            <summary>
                Only cells are selectable.
                Clicking on a cell will select the cell.
                Clicking on row or column headers does nothing.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionUnit.FullRow">
            <summary>
                Only full rows are selectable.
                Clicking on row headers or on cells will select the whole row.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridSelectionUnit.CellOrRowHeader">
            <summary>
                Cells and rows are selectable.
                Clicking on a cell will select the cell. Selecting all cells in the row will not select the row.
                Clicking on a row header will select the row and all cells in the row.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridSortingEventArgs">
            <summary>
            Event args for sorting event on datagrid
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridSortingEventArgs.Handled">
            <summary>
            To indicate that the sort has been handled
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridSortingEventHandler">
            <summary>
            Delegate for listeners on Sorting event on datagrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn">
            <summary>
                A column definition that allows a developer to specify specific
                editing and non-editing templates.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellTemplateProperty">
            <summary>
                The DependencyProperty representing the CellTemplate property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellTemplateSelectorProperty">
            <summary>
                The DependencyProperty representing the CellTemplateSelector property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateProperty">
            <summary>
                The DependencyProperty representing the CellEditingTemplate
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateSelectorProperty">
            <summary>
                The DependencyProperty representing the CellEditingTemplateSelector
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.ChooseCellTemplate(System.Boolean)">
            <summary>
                Returns either the specified CellTemplate or CellEditingTemplate.
                CellTemplate is returned if CellEditingTemplate is null.
            </summary>
            <param name="isEditing">Whether the editing template is requested.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.ChooseCellTemplateSelector(System.Boolean)">
            <summary>
                Returns either the specified CellTemplateSelector or CellEditingTemplateSelector.
                CellTemplateSelector is returned if CellEditingTemplateSelector is null.
            </summary>
            <param name="isEditing">Whether the editing template selector is requested.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.LoadTemplateContent(System.Boolean,System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridCell)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
            <param name="isEditing">Whether the editing version is being requested.</param>
            <param name="dataItem">The data item for the cell.</param>
            <param name="cell">The cell container that will receive the tree.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree that will become the content of a cell.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Override which handles property
            change for template properties
            </summary>
            <param name="element"></param>
            <param name="propertyName"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellTemplate">
            <summary>
                A template describing how to display data for a cell in this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellTemplateSelector">
            <summary>
                A template selector describing how to display data for a cell in this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate">
            <summary>
                A template describing how to display data for a cell 
                that is being edited in this column.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateSelector">
            <summary>
                A template selector describing how to display data for a cell 
                that is being edited in this column.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn">
            <summary>
                A column that displays editable text.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.GenerateElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for text based cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.GenerateEditingElement(ExtendedGrid.Microsoft.Windows.Controls.DataGridCell,System.Object)">
            <summary>
                Creates the visual tree for text based cells.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
                Called when a cell has just switched to edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="editingEventArgs">The event args of the input event that caused the cell to go into edit mode. May be null.</param>
            <returns>The unedited value of the cell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.CommitCellEdit(System.Windows.FrameworkElement)">
            <summary>
                Called when a cell's value is to be committed, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <returns>false if there is a validation error. true otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
                Called when a cell's value is to be cancelled, just before it exits edit mode.
            </summary>
            <param name="editingElement">A reference to element returned by GenerateEditingElement.</param>
            <param name="uneditedValue">UneditedValue</param>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontFamilyProperty">
            <summary>
                The DependencyProperty for the FontFamily property.
                Flags:              Can be used in style rules
                Default Value:      System Dialog Font
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontSizeProperty">
            <summary>
                The DependencyProperty for the FontSize property.
                Flags:              Can be used in style rules
                Default Value:      System Dialog Font Size
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontStyleProperty">
            <summary>
                The DependencyProperty for the FontStyle property.
                Flags:              Can be used in style rules
                Default Value:      System Dialog Font Style
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontWeightProperty">
            <summary>
                The DependencyProperty for the FontWeight property.
                Flags:              Can be used in style rules
                Default Value:      System Dialog Font Weight
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.ForegroundProperty">
            <summary>
                The DependencyProperty for the Foreground property.
                Flags:              Can be used in style rules
                Default Value:      System Font Color
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.DefaultElementStyle">
            <summary>
                The default value of the ElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.DefaultEditingElementStyle">
            <summary>
                The default value of the EditingElementStyle property.
                This value can be used as the BasedOn for new styles.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontFamily">
            <summary>
                The font family of the desired font.
                This will only affect controls whose template uses the property
                as a parameter. On other controls, the property will do nothing.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontSize">
            <summary>
                The size of the desired font.
                This will only affect controls whose template uses the property
                as a parameter. On other controls, the property will do nothing.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontStyle">
            <summary>
                The style of the desired font.
                This will only affect controls whose template uses the property
                as a parameter. On other controls, the property will do nothing.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.FontWeight">
            <summary>
                The weight or thickness of the desired font.
                This will only affect controls whose template uses the property
                as a parameter. On other controls, the property will do nothing.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.DataGridTextColumn.Foreground">
            <summary>
                An brush that describes the foreground color.
                This will only affect controls whose template uses the property
                as a parameter. On other controls, the property will do nothing.
            </summary>
        </member>
        <member name="M:MS.Internal.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.  Note that this epsilon is proportional
            to the numbers themselves to that AreClose survives scalar multiplication.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the AreClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            LessThan - Returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose - Returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThanOrClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.IsOne(System.Double)">
            <summary>
            IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
            but this is faster.
            </summary>
            <returns>
            bool - the result of the AreClose comparision.
            </returns>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:MS.Internal.DoubleUtil.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compares two points for fuzzy equality.  This function
            helps compensate for the fact that double values can 
            acquire error when operated upon
            </summary>
            <param name='point1'>The first point to compare</param>
            <param name='point2'>The second point to compare</param>
            <returns>Whether or not the two points are equal</returns>
        </member>
        <member name="M:MS.Internal.DoubleUtil.AreClose(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compares two rectangles for fuzzy equality.  This function
            helps compensate for the fact that double values can 
            acquire error when operated upon
            </summary>
            <param name='rect1'>The first rectangle to compare</param>
            <param name='rect2'>The second rectangle to compare</param>
            <returns>Whether or not the two rectangles are equal</returns>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.InitializingNewItemEventArgs">
            <summary>
                Provides access to the new item during the InitializingNewItem event.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.InitializingNewItemEventArgs.#ctor(System.Object)">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.InitializingNewItemEventArgs.NewItem">
            <summary>
                The new item.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.InitializingNewItemEventHandler">
            <summary>
                Delegate used for the InitializingNewItem event on DataGrid.
            </summary>
            <param name="sender">The DataGrid that raised the event.</param>
            <param name="e">The event arguments where callbacks can access the new item.</param>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection">
            <summary>
                A collection that simulates holding multiple copies of the same item.  Used as the ItemsSource for the DataGridCellsPresenter.
                For our purposes this mirrors the DataGrid.Columns collection in that it has the same number of items and changes whenever 
                the columns collection changes (though the items in it are obviously different; each item is the data object for a given row).  
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.MirrorCollectionChange(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Takes a collection change notifcation and causes the MultipleCopies collection to sync to the changes.  For example,
                if an item was removed at a given index, the MultipleCopiesCollection also removes an item at the same index and fires
                its own collection changed event.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.SyncToCount(System.Int32)">
            <summary>
                Syncs up the count with the given one.  This is used when we know we've missed a CollectionChanged event (say this 
                MultipleCopiesCollection is inside a DataGridRow that was virtualized and recycled).  It attempts to resync
                by adjusting the count and firing the proper property change notifications.
            </summary>
            <remarks>
                This method works in concert with the DataGridCellsPresenter.  We don't know where items were removed / added, so containers
                (DataGridCells) based off this collection could be stale (wrong column).  The cells presenter updates them.  We could have also 
                just fired a Reset event here and not bothered with work in the cells presenter, but that would cause all cells to be regenerated. 
                
                Note that this method is designed to sync up to ALL collection changes that may have happened.  
                The job of this method is made significantly easier by the fact that the MultipleCopiesCollection really only cares about
                the count of items in the given collection (since we keep it in sync with the DataGrid Columns collection but host
                a DataGridRow as the item).  This means we don't care about Move, Replace, etc.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
                Helper to raise a CollectionChanged event when an item is added or removed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.OnCollectionReset">
            <summary>
                Helper to raise a CollectionChanged event when the collection is cleared.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.OnPropertyChanged(System.String)">
            <summary>
                Helper to raise a PropertyChanged event.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.CopiedItem">
            <summary>
                This is the item that is returned multiple times.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.MultipleCopiesCollection.RepeatCount">
            <summary>
                This is the number of times the item is to be repeated.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget">
            <summary>
            Enum used to specify where we want an internal property change notification to be routed.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter">
            <summary>
                A control that will be responsible for generating cells.
                This control is meant to be specified within the template of a DataGridRow.
                The APIs from ItemsControl do not match up nicely with the meaning of a
                row, which is why this is being factored out.
            
                The data item for the row is added n times to the Items collection, 
                where n is the number of columns in the DataGrid. This is implemented
                using a special collection to avoid keeping multiple references to the
                same object.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.#cctor">
            <summary>
                Instantiates global information.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnApplyTemplate">
            <summary>
                Tells the row owner about this element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.SyncProperties(System.Boolean)">
            <summary>
                Update all properties that get a value from the DataGrid
            </summary>
            <remarks>
                See comment on DataGridRow.SyncProperties
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnItemChanged(System.Object,System.Object)">
            <summary>
                Called when the value of the Item property changes.
            </summary>
            <param name="oldItem">The old value of Item.</param>
            <param name="newItem">The new value of Item.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines if an item is its own container.
            </summary>
            <param name="item">The item to test.</param>
            <returns>true if the item is a DataGridCell, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.IsItemItsOwnContainerInternal(System.Object)">
            <summary>
                Method which returns the result of IsItemItsOwnContainerOverride to be used internally
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.GetContainerForItemOverride">
            <summary>
                Instantiates an instance of a container.
            </summary>
            <returns>A new DataGridCell.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Prepares a new container for a given item.
            </summary>
            <param name="element">The new container.</param>
            <param name="item">The item that the container represents.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Clears a container of references.
            </summary>
            <param name="element">The container being cleared.</param>
            <param name="item">The data item that the container represented.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnColumnsChanged(System.Collections.ObjectModel.ObservableCollection{ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn},System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notification from the DataGrid that the columns collection has changed.
            </summary>
            <param name="columns">The columns collection.</param>
            <param name="e">The event arguments from the collection's change event.</param>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnNotifyHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.NotifyPropertyChanged(System.Windows.DependencyObject,System.String,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure.  This is overridden so that the row can extend its size to account for a grid line on the bottom.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange.  This is overriden so that the row can position its content to account for a grid line on the bottom.
            </summary>
            <param name="finalSize">Arrange size</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                OnRender.  Overriden to draw a horizontal line underneath the content.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnIsVirtualizingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for VirtualizingStackPanel.IsVirtualizing property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.OnCoerceIsVirtualizingProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coercion callback for VirtualizingStackPanel.IsVirtualizing property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.InvalidateDataGridCellsPanelMeasureAndArrange">
            <summary>
                Helper method which invalidate the underlying itemshost's measure and arrange
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.InvalidateDataGridCellsPanelMeasureAndArrange(System.Boolean)">
            <summary>
                Helper method which invalidate the underlying itemshost's measure and arrange
            </summary>
            <param name="withColumnVirtualization">
                True to invalidate only when virtualization is on.
                False to invalidate only when virtualization is off.
            </param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.ScrollCellIntoView(System.Int32)">
            <summary>
                Method which tries to scroll a cell for given index into the scroll view
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.Item">
            <summary>
                The item that the row represents. This item is an entry in the list of items from the DataGrid.
                From this item, cells are generated for each column in the DataGrid.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.InternalItemsHost">
            <summary>
                Workaround for not being able to access the panel instance of 
                itemscontrol directly
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.DataGridOwner">
            <summary>
                The DataGrid that owns this control
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridCellsPresenter.DataGridRowOwner">
            <summary>
                The DataGridRow that owns this control.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader">
            <summary>
            Container for the Column header object.  This is instantiated by the DataGridColumnHeadersPresenter.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty">
            <summary>
                DependencyProperty for SeperatorBrush.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty">
            <summary>
                DependencyProperty for SeperatorBrush.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.PrepareColumnHeader(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn)">
            <summary>
            Prepares a column header to be used.  Sets up the association between the column header and its column.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.DisplayIndexPropertyKey">
            <summary>
            DependencyPropertyKey for DisplayIndex property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.DisplayIndexProperty">
            <summary>
                The DependencyProperty for the DisplayIndex property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceDisplayIndex(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion callback for DisplayIndex property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnDisplayIndexChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed call back for DisplayIndex property.
            Sets the visibility of resize grippers accordingly
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnApplyTemplate">
            <summary>
            Override for <see cref="M:System.Windows.FrameworkElement.OnApplyTemplate">FrameworkElement.OnApplyTemplate</see>
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.HookupGripperEvents">
             <summary>
             Find grippers and register drag events
            
             The default style for DataGridHeader is
             +-------------------------------+
             +---------+           +---------+
             + Gripper +  Header   + Gripper +
             +         +           +         +
             +---------+           +---------+
             +-------------------------------+
             
             The reason we have two grippers is we can't extend the right gripper to straddle the line between two 
             headers; the header to the right would render on top of it.
             We resize a column by grabbing the gripper to the right; the leftmost gripper thus adjusts the width of
             the column to its left.
             </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.UnhookGripperEvents">
            <summary>
            Clear gripper event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.HeaderToResize(System.Object)">
            <summary>
            Returns either this header or the one before it depending on which Gripper fired the event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.RecomputeColumnWidthsOnColumnResize(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader,System.Double)">
            <summary>
            Method which recomputes the widths of columns on resize of a header
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnNotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies the Header of a property change.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notification for column header-related DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceContent(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the Content property.  We're choosing a value between Column.Header and the Content property on ColumnHeader.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceContentTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplate property based on the templates defined on the Column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceContentTemplateSelector(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplateSelector property based on the selector defined on the Column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceStringFormat(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentStringFormat property based on the templates defined on the Column.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the Style property based on the templates defined on the Column or DataGrid.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.CanUserSortPropertyKey">
            <summary>
            DependencyPropertyKey for CanUserSort property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.CanUserSortProperty">
            <summary>
                The DependencyProperty for the CanUserSort property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SortDirectionPropertyKey">
            <summary>
            DependencyPropertyKey for SortDirection property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SortDirectionProperty">
            <summary>
                The DependencyProperty for the SortDirection property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnClick">
            <summary>
            The override of ButtonBase.OnClick.
            Informs the owning datagrid to sort itself after the execution of usual button stuff
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceHeight(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion callback for Height property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceCanUserSort(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion callback for CanUserSort property. Checks for the value of CanUserSort on owning column
            and returns accordingly
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceSortDirection(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion callback for SortDirection property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.IsFrozenPropertyKey">
            <summary>
            DependencyPropertyKey for IsFrozen property
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.IsFrozenProperty">
            <summary>
                The DependencyProperty for the IsFrozen property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceIsFrozen(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion callback for IsFrozen property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnCoerceClip(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion call back for clip property which ensures that the header overlapping with frozen 
            column gets clipped appropriately.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.Column">
            <summary>
                The Column associated with this DataGridColumnHeader.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush">
            <summary>
                Property that indicates the brush to use when drawing seperators between headers.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility">
            <summary>
                Property that indicates the Visibility for the header seperators.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.Tracker">
            <summary>
                Used by the DataGridRowGenerator owner to send notifications to the cell container.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.DisplayIndex">
            <summary>
            The property which represents the displayindex of the  column corresponding to this header
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.CanUserSort">
            <summary>
                CanUserSort is the flag which determines if the datagrid can be sorted based on the column of this header
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SortDirection">
            <summary>
            The property for current sort direction of the column of this header
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.IsFrozen">
            <summary>
            The property to determine if the column corresponding to this header is frozen or not
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.SuppressClickEvent">
            <summary>
            Property which determines if click event has to raised or not. Used during column drag drop which could
            be mis-interpreted as a click
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.PreviousVisibleHeader">
            <summary>
                Used by the resize code -- this is the header that the left gripper should be resizing.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter">
            <summary>
                A control that will be responsible for generating column headers.
                This control is meant to be specified within the template of the DataGrid.
                
                It typically isn't in the subtree of the main ScrollViewer for the DataGrid. 
                It thus handles scrolling the column headers horizontally.  For this to work
                it needs to be able to find the ScrollViewer -- this is done by setting the 
                SourceScrollViewerName property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnApplyTemplate">
            <summary>
                Tells the row owner about this element.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange
            </summary>
            <param name="finalSize">Arrange size</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.GetLayoutClip(System.Windows.Size)">
            <summary>
                Override of UIElement.GetLayoutClip().  This is a tricky way to ensure we always clip regardless of the value of ClipToBounds.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.GetContainerForItemOverride">
            <summary>
                Instantiates an instance of a container.
            </summary>
            <returns>A new DataGridColumnHeader.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines if an item is its own container.
            </summary>
            <param name="item">The item to test.</param>
            <returns>true if the item is a DataGridColumnHeader, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.IsItemItsOwnContainerInternal(System.Object)">
            <summary>
                Method which returns the result of IsItemItsOwnContainerOverride to be used internally
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Prepares a new container for a given item.
            </summary>
            <remarks>We do not want to call base.PrepareContainerForItemOverride in this override because it will set local values on the header</remarks>
            <param name="element">The new container.</param>
            <param name="item">The item that the container represents.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
                Clears a container of references.
            </summary>
            <param name="element">The container being cleared.</param>
            <param name="item">The data item that the container represented.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                General notification for DependencyProperty changes from the grid.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.NotifyPropertyChanged(System.Windows.DependencyObject,System.String,System.Windows.DependencyPropertyChangedEventArgs,ExtendedGrid.Microsoft.Windows.Controls.NotificationTarget)">
            <summary>
                Notification for column header-related DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnIsVirtualizingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Property changed callback for VirtualizingStackPanel.IsVirtualizing property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnCoerceIsVirtualizingProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coercion callback for VirtualizingStackPanel.IsVirtualizing property
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.InvalidateDataGridCellsPanelMeasureAndArrange">
            <summary>
                Helper method which invalidate the underlying itemshost's measure and arrange
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.InvalidateDataGridCellsPanelMeasureAndArrange(System.Boolean)">
            <summary>
                Helper method which invalidate the underlying itemshost's measure and arrange
            </summary>
            <param name="withColumnVirtualization">
                True to invalidate only when virtualization is on.
                False to invalidate only when virtualization is off.
            </param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.GetVisualChild(System.Int32)">
            <summary>
                Override of GetVisualChild which accomodates the indicators as visual children
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnHeaderMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Gets called on mouse left button down of child header, and ensures preparation for column header drag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnHeaderMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
                Gets called on mouse move of child header, and ensures column header drag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnHeaderMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Gets called on mouse left button up of child header, and ensures reordering of columns on successful completion of drag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnHeaderLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
                Gets called on mouse lost capture of child header and ensures that when capture gets lost
                the drag ends in appropriate state. In this case it restore the drag state to
                the start of the operation by finishing the drag with cancel flag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.ClearColumnHeaderDragInfo">
            <summary>
                Helper method which clears the header drag state
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.PrepareColumnHeaderDrag(ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader,System.Windows.Point,System.Windows.Point)">
            <summary>
                Method which prepares the state for the start of column header drag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.CheckStartColumnHeaderDrag(System.Windows.Point,System.Windows.Point)">
            <summary>
                Method which checks if mouse move is sufficient to start the drag
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.IsMousePositionValidForColumnDrag(System.Double)">
            <summary>
                Method which checks during and after the drag if the position is valid for the drop
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.IsMousePositionValidForColumnDrag(System.Double,System.Int32@)">
            <summary>
                Method which checks during and after the drag if the position is valid for the drop and returns the drop display index
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.StartColumnHeaderDrag">
            <summary>
                Method which start the column header drag. Includes raising events and creating default ghosts
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.CreateColumnHeaderDragIndicator">
            <summary>
                Method which returns a default control for column header drag indicator
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.SetDefaultsOnDragIndicator">
            <summary>
                Method which set the default values on drag indicator
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.CreateColumnHeaderDropIndicator">
            <summary>
                Method which returns the default control for the column header drop indicator
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.SetDefaultsOnDropIndicator">
            <summary>
                Method which sets the default values on drop indicator
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.FinishColumnHeaderDrag(System.Boolean)">
            <summary>
                Method which completes the column header drag. Includes raising of events and changing column display index if needed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.FindDisplayIndexByPosition(System.Windows.Point,System.Boolean)">
            <summary>
                Helper method to determine the display index based on the given position
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.FindColumnHeaderByPosition(System.Windows.Point)">
            <summary>
                Helper method to determine the column header based on the given position
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.FindColumnHeaderPositionByCurrentPosition(System.Windows.Point,System.Boolean)">
            <summary>
                Helper method to determine the position of drop indicator based on the given mouse position
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.GetColumnEstimatedWidth(ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,System.Double)">
            <summary>
                Helper method which estimates the column width
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.FindDisplayIndexAndHeaderPosition(System.Windows.Point,System.Boolean,System.Int32@,System.Windows.Point@,ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeader@)">
            <summary>
                Helper method to find display index, header and header start position based on given mouse position
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.InternalItemsHost">
            <summary>
                Workaround for not being able to access the panel instance of 
                itemscontrol directly
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.VisualChildrenCount">
            <summary>
                Override of VisualChildrenCount which accomodates the indicators as visual children
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.#ctor">
            <summary>
                Instantiates a new instance of this class.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.OnCoerceContentTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplate property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.OnCoerceContentTemplateSelector(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplateSelector property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.IsInVisualSubTree(System.Windows.DependencyObject)">
            <summary>
                Helper method to determine if the given object
                is in the visual sub tree of the Details Presenter.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.SyncProperties">
            <summary>
                Update all properties that get a value from the DataGrid
            </summary>
            <remarks>
                See comment on DataGridRow.OnDataGridChanged
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.OnNotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies parts that respond to changes in the properties.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
                Measure.  This is overridden so that the row can extend its size to account for a grid line on the bottom.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arrange.  This is overriden so that the row can position its content to account for a grid line on the bottom.
            </summary>
            <param name="finalSize">Arrange size</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                OnRender.  Overriden to draw a horizontal line underneath the content.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.DataGridOwner">
            <summary>
                The DataGrid that owns this control
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridDetailsPresenter.DataGridRowOwner">
            <summary>
                The DataGridRow that owns this control.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader">
            <summary>
            Represents the header for each row of the DataGrid
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty">
            <summary>
                DependencyProperty for SeperatorBrush.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty">
            <summary>
                DependencyProperty for SeperatorBrush.
            </summary>
        </member>
        <!-- 对于成员“M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.MeasureOverride(System.Windows.Size)”忽略有格式错误的 XML 注释 -->
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.SyncProperties">
            <summary>
                Update all properties that get a value from the DataGrid
            </summary>
            <remarks>
                See comment on DataGridRow.OnDataGridChanged
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnNotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notifies parts that respond to changes in the properties.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.NotifyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Notification for column header-related DependencyProperty changes from the grid or from columns.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnCoerceContent(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the Content property.  We're choosing a value between Row.Header and the Content property on RowHeader.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnCoerceContentTemplate(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplate property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnCoerceContentTemplateSelector(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the ContentTemplateSelector property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnCoerceStyle(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the Style property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnCoerceWidth(System.Windows.DependencyObject,System.Object)">
            <summary>
                Coerces the Width property.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.IsRowSelectedProperty">
            <summary>
                The DependencyProperty for the IsRowSelected property.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.OnClick">
            <summary>
                Called when the header is clicked.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.HookupGripperEvents">
             <summary>
             Find grippers and register drag events
            
             The default style for DataGridRowHeader is
             +-------------------------------+
             +-------------------------------+ 
             +           Gripper             + 
             +-------------------------------+
             +            Header             +
             +-------------------------------+ 
             +           Gripper             + 
             +-------------------------------+
             +-------------------------------+
             
             The reason we have two grippers is we can't extend the bottom gripper to straddle the line between two 
             headers; the header below would render on top of it.
             We resize a Row by grabbing the gripper to the bottom; the top gripper thus adjusts the height of
             the row above it.
             </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.UnhookGripperEvents">
            <summary>
            Clear gripper event
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.RowToResize(System.Object)">
            <summary>
            Returns either this header or the one before it depending on which Gripper fired the event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush">
            <summary>
                Property that indicates the brush to use when drawing seperators between headers.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility">
            <summary>
                Property that indicates the Visibility for the header seperators.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.IsRowSelected">
            <summary>
                Indicates whether the owning DataGridRow is selected.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.Primitives.DataGridRowHeader.PreviousRow">
            <summary>
                This is the row that the top gripper should be resizing.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.Primitives.SelectiveScrollingGrid">
            <summary>
            Subclass of Grid that knows how to freeze certain cells in place when scrolled.
            Used as the panel for the DataGridRow to hold the header, cells, and details.
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.Primitives.SelectiveScrollingGrid.SelectiveScrollingOrientationProperty">
            <summary>
            Attached property to specify the selective scroll behaviour of cells
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.SelectiveScrollingGrid.GetSelectiveScrollingOrientation(System.Windows.DependencyObject)">
            <summary>
            Getter for the SelectiveScrollingOrientation attached property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.SelectiveScrollingGrid.SetSelectiveScrollingOrientation(System.Windows.DependencyObject,ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation)">
            <summary>
            Setter for the SelectiveScrollingOrientation attached property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.Primitives.SelectiveScrollingGrid.OnSelectiveScrollingOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed call back for SelectiveScrollingOrientation property
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock">
            <summary>
                Struct which holds block of realized column indices.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock.StartIndex">
            <summary>
                Starting index of the block
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock.EndIndex">
            <summary>
                Ending index of the block
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.RealizedColumnsBlock.StartIndexOffset">
            <summary>
                The count of realized columns before this block
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs">
            <summary>
                Communicates which cells were added or removed from the SelectedCells collection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs.#ctor(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo},System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo})">
            <summary>
                Creates a new instance of this class.
            </summary>
            <param name="addedCells">The cells that were added. Must be non-null, but may be empty.</param>
            <param name="removedCells">The cells that were removed. Must be non-null, but may be empty.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo},System.Collections.ObjectModel.ReadOnlyCollection{ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo})">
            <summary>
                Creates a new instance of this class.
            </summary>
            <param name="addedCells">The cells that were added. Must be non-null, but may be empty.</param>
            <param name="removedCells">The cells that were removed. Must be non-null, but may be empty.</param>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs.AddedCells">
            <summary>
                The cells that were added.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventArgs.RemovedCells">
            <summary>
                The cells that were removed.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsChangedEventHandler">
            <summary>
                An event handler used to notify of changes to the SelectedCells collection.
            </summary>
            <param name="sender">The DataGrid that owns the SelectedCells collection that changed.</param>
            <param name="e">Event arguments that communicate which cells were added or removed.</param>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsCollection">
            <summary>
                A collection that optimizes the storage of DataGridCellInfo.
            </summary>
            <remarks>
                The collection is exposed through the DataGrid.SelectedCells property as
                a generic IList.
                
                The collection maintains a list of DataGridCellInfo so that users of the
                SelectedCells property can interact with it like a normal list.
                
                The collection maintains a dictionary mapping rows to columns and 
                a dictionary that maps columns to rows. This allows quick retrieval
                of all selected cells in a particular row or column. These are
                operations that occur when select/deselecting a row or column.
                
                The collection implements all the parts of INotifyCollectionChanged so
                that the DataGrid can be notified of changes, but does not expose the
                interface so that SelectedCells can't be cast to it. This was to
                reduce the test coverage and the undiscoverability of the interface.
            </remarks>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Instantiates a read/write instance of this class.
            </summary>
            <param name="owner">
                In order to not always keep references to cells, the collection
                requires a reference to the source of the cells.
            </param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.#ctor(ExtendedGrid.Microsoft.Windows.Controls.DataGrid,System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion})">
            <summary>
                Creates a read-only collection initialized to the specified region.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.MakeEmptyCollection(ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Creates an empty, read-only collection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Add(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Adds a cell to the list.
            </summary>
            <param name="cell">The cell to add.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.AddValidatedCell(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Adds a validated cell to the list.
            </summary>
            <param name="cell">The cell to add.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Clear">
            <summary>
                Removes all cells from the collection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Contains(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Determines if the cell is contained within the list.
            </summary>
            <param name="cell">The cell.</param>
            <returns>true if the cell appears in the list. false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CopyTo(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo[],System.Int32)">
            <summary>
                Copies the contents of the list to the destination array, starting at the specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the destination array to start copying to.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator for the list.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.GetEnumerator">
            <summary>
                Returns an enumerator for the list.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.IndexOf(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Returns the index in the list of the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The index of the cell in the list or -1 if it is not within the list.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Insert(System.Int32,ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Not supported.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Remove(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Remove the cell from the collection.
            </summary>
            <param name="cell">The cell to remove.</param>
            <returns>true if the cell was removed. false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the cell at the specified index in the list.
            </summary>
            <param name="index">A zero-based index into the list.</param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.OnAdd(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Notifies that cells were added.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.OnRemove(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Notifies that cells were removed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Notification that the collection has changed.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Collections.IList)">
            <summary>
                Called by the DataGrid when Items.CollectionChanged is raised.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Union(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Merges another collection into this one.
                Used for event argument coalescing.
                This method should not be used for SelectedCellsCollection since it doesn't
                coalesce the change notification.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Xor(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Removes the intersection of the two collections from both collections.
                Used for event argument coalescing.
                This method should not be used for SelectedCellsCollection since it doesn't
                coalesce the change notification.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.ClearFullRows(System.Collections.IList)">
            <summary>
                Removes regions belonging to the list of full rows.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RestoreOnlyFullRows(System.Collections.IList)">
            <summary>
                Ensures that full rows in the list are selected.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RemoveAllButOne(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo)">
            <summary>
                Clears the cells, leaving only one.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RemoveAllButOne">
            <summary>
                Clears the cells, leaving only one.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RemoveAllButOneRow(System.Int32)">
            <summary>
                Clears all of the cells except for the ones in the given row.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Intersects(System.Int32)">
            <summary>
                Determines if the row has any cells in this collection.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Intersects(System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
                Determines if the row has any cells in this collection and
                returns the columns that are selected.
            </summary>
            <param name="columnIndexRanges">
                An array where every two entries consitutes a pair consisting of 
                the starting index and the width that describe the column ranges 
                that intersect the row.
            </param>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.ConvertCellInfoToIndexes(ExtendedGrid.Microsoft.Windows.Controls.DataGridCellInfo,System.Int32@,System.Int32@)">
            <summary>
                Converts a DataGridCellInfo into a row and column index.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.ConvertIndexToIndexes(System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion},System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Converts an index to a row and column index.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.GetCellInfoFromIndex(ExtendedGrid.Microsoft.Windows.Controls.DataGrid,System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion},System.Int32)">
            <summary>
                Converts from an index to a DataGridCellInfo.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CreateCellInfo(System.Object,ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn,ExtendedGrid.Microsoft.Windows.Controls.DataGrid)">
            <summary>
                Overriden by collections faking removed columns and rows.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Item(System.Int32)">
            <summary>
                Returns the cell at the specified index in the list.
            </summary>
            <param name="index">A zero-based index into the list.</param>
            <returns>The cell at the specified index.</returns>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.Count">
            <summary>
                The number of cells in the list.
            </summary>
        </member>
        <member name="P:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.IsReadOnly">
            <summary>
                Whether the collection can be changed.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.VirtualizedCellInfoCollectionEnumerator">
            <summary>
                Iterates through region lists in list order and then from left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion.Union(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion)">
            <summary>
                Attempts to combine this region with another.
            </summary>
            <param name="region">The region to add.</param>
            <returns>true if the region was incorporated into this region, false otherwise.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion.Remainder(ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion,System.Collections.Generic.List{ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.CellRegion}@)">
            <summary>
                Determines the remainder of this region when the specified region is removed.
                This method does not modify this region.
            </summary>
            <param name="region">The region to remove from this region.</param>
            <param name="remainder">What is left of this region when the specified region is removed.</param>
            <returns></returns>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection.RemovedCellInfoCollection">
            <summary>
                A special collection to fake removed columns or rows for change notifications.
            </summary>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsCollection.GetSelectionRange(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Calculates the bounding box of the cells.
            </summary>
            <returns>true if not empty, false if empty.</returns>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.SelectedCellsCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection,ExtendedGrid.Microsoft.Windows.Controls.VirtualizedCellInfoCollection)">
            <summary>
                Notify the owning DataGrid of changes to this collection.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation">
            <summary>
                Enum to specify the scroll orientation of cells in selective scroll grid
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation.None">
            <summary>
            The cell will not be allowed to get
            sctolled in any direction
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation.Horizontal">
            <summary>
            The cell will be allowed to
            get scrolled only in horizontal direction
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation.Vertical">
            <summary>
            The cell will be allowed to
            get scrolled only in vertical directions
            </summary>
        </member>
        <member name="F:ExtendedGrid.Microsoft.Windows.Controls.SelectiveScrollingOrientation.Both">
            <summary>
            The cell will be allowed to get
            scrolled in all directions
            </summary>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable">
            <devdoc>
                This is a hashtable that stores object keys as weak references.  
                It monitors memory usage and will periodically scavenge the
                hash table to clean out dead references.
            </devdoc>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable.Clear">
            <devdoc>
                Override of clear that performs a scavenge.
            </devdoc>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable.Remove(System.Object)">
            <devdoc>
                Override of remove that performs a scavenge.
            </devdoc>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable.SetWeak(System.Object,System.Object)">
            <devdoc>
                Override of Item that wraps a weak reference around the
                key and performs a scavenge.
            </devdoc>
        </member>
        <member name="M:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable.ScavengeKeys">
            <devdoc>
                This method checks to see if it is necessary to
                scavenge keys, and if it is it performs a scan
                of all keys to see which ones are no longer valid.
                To determine if we need to scavenge keys we need to
                try to track the current GC memory.  Our rule of
                thumb is that if GC memory is decreasing and our
                key count is constant we need to scavenge.  We
                will need to see if this is too often for extreme
                use cases like the CompactFramework (they add
                custom type data for every object at design time).
            </devdoc>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.WeakHashtable.EqualityWeakReference">
            <devdoc>
                A wrapper of WeakReference that overrides GetHashCode and
                Equals so that the weak reference returns the same equality
                semantics as the object it wraps.  This will always return
                the object's hash code and will return True for a Equals
                comparison of the object it is wrapping.  If the object
                it is wrapping has finalized, Equals always returns false.
            </devdoc>
        </member>
        <member name="T:ExtendedGrid.Microsoft.Windows.Controls.SR">
            <summary>
                Retrieves exception strings and other localized strings.
            </summary>
        </member>
        <member name="T:ExtendedGrid.Styles.DataGridGeneric">
            <summary>
            DataGridGeneric
            </summary>
        </member>
        <member name="M:ExtendedGrid.Styles.DataGridGeneric.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExtendedGrid.UserControls.ColumnChooserControl">
            <summary>
            Interaction logic for ColumnChooserControl.xaml
            </summary>
            <summary>
            ColumnChooserControl
            </summary>
        </member>
        <member name="M:ExtendedGrid.UserControls.ColumnChooserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
