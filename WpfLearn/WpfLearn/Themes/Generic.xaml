<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WpfLearn.Deletable">
    <!-- 该文件必须放在Themes文件夹下 -->
    <!-- 该文件必须放在Themes文件夹下 -->

    <!--设置ListView的样式-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type  local:TileView}, ResourceId=TileView}" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter  Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="BorderThickness" Value="0.5"></Setter>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"></Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Width="{Binding (FrameworkElement.ActualWidth),  RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}"></WrapPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <!-- Alternative approach to changing the ItemsPanel -->
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Name="bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}">
                        <ScrollViewer Margin="{TemplateBinding Padding}">
                            <WrapPanel ItemWidth="200" IsItemsHost="True" MinWidth="100"
                         Width="{Binding ActualWidth,RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}">
                            </WrapPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->


        <!-- Alternative approach to set the item ContentTemplate. -->
        <!--<Setter Property="ItemTemplate" 
                Value="{Binding (ListView.View).ItemTemplate,
            RelativeSource={RelativeSource Self}}">
           
        </Setter>-->
        
        
    </Style>

    <!--设置ListViewItem的样式-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:TileView}, ResourceId=TileViewItem}" TargetType="{x:Type  ListViewItem}" BasedOn="{StaticResource {x:Type  ListBoxItem}}">
        <Setter Property="Padding"  Value="3"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="ContentTemplate" Value="{Binding Path=View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"></Setter>
<!--
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
           Name="Border" BorderThickness="1" BorderBrush="Aquamarine" CornerRadius="3" >
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush"
               Value="{Binding Path=View.SelectedBorderBrush,
            RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"></Setter>
                            <Setter TargetName="Border" Property="Background"
              Value="{Binding Path=View.SelectedBackground,
            RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->

    </Style>

    <ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type  Window}">
        <Border  Name="WindowBorder">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <!-- The title bar. -->
                <TextBlock Text="{TemplateBinding Title}"
FontWeight="Bold"></TextBlock>
                <Button Style="{StaticResource CloseButton}"
HorizontalAlignment="Right"></Button>
                <!-- The window content. -->
                <Border Grid.Row="1">
                    <AdornerDecorator>
                        <ContentPresenter></ContentPresenter>
                    </AdornerDecorator>
                </Border>
                <!-- The footer. -->
                <ContentPresenter Grid.Row="2" Margin="10"
HorizontalAlignment="Center"
Content="{TemplateBinding Tag}"></ContentPresenter>
                <!-- The resize grip. -->
                <ResizeGrip Name="WindowResizeGrip" Grid.Row="2"
HorizontalAlignment="Right" VerticalAlignment="Bottom"
Visibility="Collapsed" IsTabStop="False" />
                <!-- The invisible rectangles that allow dragging to resize. -->
                <Rectangle Grid.Row="1" Grid.RowSpan="3" Cursor="SizeWE"
VerticalAlignment="Stretch" HorizontalAlignment="Right"
Fill="Transparent" Width="5"></Rectangle>
                <Rectangle Grid.Row="2" Cursor="SizeNS"
HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
Fill="Transparent" Height="5"></Rectangle>
                </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>


    </ControlTemplate>
</ResourceDictionary>