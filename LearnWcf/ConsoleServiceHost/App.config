<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>

  <system.serviceModel>
    
    <!--services 节点中包含着所有Service的配置说明-->
    <services>
      <!--
      name：指定Service类型，全限定名  ServiceHost载入服务时，会到配置文件中的<services>下找有没有name属性跟服务配置的，并加载该配置
      behaviorConfiguration：指定在<serviceBehaviors>下的一个<behavior>的name,定义service的行为
      
      -->
      <service name="CommonWcfServiceLibrary.Service1" behaviorConfiguration="CmluServiceBehavior">
        
        <!--
        每个服务有多个Endpoint,  
        address:指定Endpoint对外的URI，可以是绝对地址，也可以是相对于baseAddress的地址。如果为空，则Endpoint的地址是baseAddress
        binding:指Endpoint使用的binding, basicHttpBinding是兼容web service的，wsHttpBinding增加了安全配置
        contract:指Endpoint对应的服务接口的全限定名
        bindingConfiguration: 指定binding的配置名，跟<bindings>下同类的<binding>的name匹配
        name: Endpoint的名称，可选属性
        -->
        <endpoint address="" binding="wsHttpBinding" bindingConfiguration="WsHttpBindingConfig" contract="CommonWcfServiceLibrary.IService1" />
        <!--暴露元数据的绑定  确实暴露了元数据，但不像设置元数据httpGetEnabled那样可以通过网页访问，可以通过添加webservice访问-->
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
        
        <!--为service增加基地址-->
        <host>
          <baseAddresses>
            <!--
            可以添加多个基地址，但每种传输协议只能有一个基地址
            Http的baseAddress同时作为对外发布元数据的URI
            -->
            <add baseAddress="http://localhost:19829/"/>
          </baseAddresses>
        </host>
      </service>
    </services>
    
    <!--绑定配置-->
    <bindings>
      <!--指定一个或者多个系统定义的binding-->
      <wsHttpBinding>
        <!--
        name:标志绑定
        closeTimeout: 完成关闭操作的时间间隔，默认值为00:01:00
        maxBufferPoolSize:设置此绑定的缓冲池大小，默认值是512*1024byte  5242880=5M
        maxReceivedMeassageSize: 此绑定通道上可以接受的最大消息大小（字节），超过此限制，接收方将删除该消息 67108864=64M
        messageEncoding: 对消息编码的编码器  Text:表示文本消息编码器（默认方式），Mtom:使用消息传输组织机制 1.0 (MTOM) 编码器。
        openTimeout:完成打开操作的时间间隔  默认值为00:01:00
        sendTimeout: 完成发送操作的时间间隔  默认值为00：01:00
        textEncoding: 此绑定上发出消息的字符集编码：  默认是Utf8TextEncoding 
        receiveTimeout: 指定为完成接收操作的时间间隔  默认值为00：01:00
        transactionFlow： 一个布尔值，指定绑定是否支持流动 WS-Transactions。默认值为 false。
        -->
        <binding name="WsHttpBindingConfig" closeTimeout="00:00:30" openTimeout="00:00:30" sendTimeout="00:00:40" receiveTimeout="00:01:00" maxBufferPoolSize="5242880" maxReceivedMessageSize="67108864" textEncoding="utf-8" messageEncoding="Text">
          <!--
          指定采用该配置的Endpoint的SOAP消息的复杂性约束
maxArrayLength
      一个正整数，指定所允许的最大数组长度。默认值为 16384。
maxBytesPerRead
      一个正整数，指定每项读取操作返回的所允许的最大字节数。默认值为 4096。
maxDepth
      一个正整数，指定每项读取操作的最大嵌套节点深度。默认值为 32。
maxNameTableCharCount
      一个正整数，指定表名称中允许的最大字符数。默认值为 16384。
maxStringContentLength
      一个正整数，指定 XML 元素内容中允许包含的最大字符数。默认值为 8192。
          -->
          <readerQuotas maxArrayLength="16384" maxBytesPerRead="4096" maxDepth="32" maxNameTableCharCount="16384" maxStringContentLength="65536"/>
          <!--None: 禁用安全性-->
          <security mode="None"></security>

          <!--
          是否支持可靠的Session,意味着消息是按照发送顺序处理的，并且保证每个消息传递一次，客户端和服务器端均需配置才能支持可靠session
          inactivityTimeout: transport不活跃的时间后，连接自动关闭
          每创建一个代理实例相当于创建一个Session,除非必要，否则不要使用session，
          -->
          <reliableSession enabled="true" inactivityTimeout="00:08:00"/>
        </binding>
      </wsHttpBinding>

      <basicHttpBinding>
        <!--
        name:标志绑定
        closeTimeout: 完成关闭操作的时间间隔，默认值为00:01:00
        maxBufferPoolSize:设置此绑定的缓冲池大小，默认值是512*1024byte  5242880=5M
        maxReceivedMeassageSize: 此绑定通道上可以接受的最大消息大小（字节），超过此限制，接收方将删除该消息 134217728=128M
        messageEncoding: 对消息编码的编码器  Text:表示文本消息编码器（默认方式），Mtom:使用消息传输组织机制 1.0 (MTOM) 编码器。
        openTimeout:完成打开操作的时间间隔  默认值为00:01:00
        sendTimeout: 完成发送操作的时间间隔  默认值为00：01:00
        textEncoding: 此绑定上发出消息的字符集编码：  默认是Utf8TextEncoding 
        receiveTimeout: 指定为完成接收操作的时间间隔  默认值为00：01:00
        transactionFlow： 一个布尔值，指定绑定是否支持流动 WS-Transactions。默认值为 false。
        -->
        <binding name="BasicHttpBindingConfig" closeTimeout="00:00:30" openTimeout="00:00:30" sendTimeout="00:00:40" receiveTimeout="00:01:00" maxBufferPoolSize="5242880" maxReceivedMessageSize="134217728" textEncoding="utf-8" messageEncoding="Text">
          <security mode="None"/>
        </binding>
      </basicHttpBinding>
    </bindings>
  
    <behaviors>
      <!--定义service的行为-->
      <serviceBehaviors>
        <behavior name="CmluServiceBehavior">
          <!--通过http来暴露元数据
          name: behavior的唯一标识
          httpGetEnabled: bool值，标识是否允许通过http的get方法来获取元数据
          httpGetUrl: 如果httpGetEnabled为true，这个属性指示使用哪个URL地址发布服务的WSDL, 果这个属性没有设置，则使用服务的HTTP类型的baseAddress后面加上?WSDL
          -->
          <serviceMetadata httpGetEnabled="true"/>
          <!--true:接收故障异常详细信息以进行调试  false避免泄露异常信息-->
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>

      <!--定义Endpoint的行为-->
      <endpointBehaviors>
        
      </endpointBehaviors>
    </behaviors>

  </system.serviceModel>

</configuration>